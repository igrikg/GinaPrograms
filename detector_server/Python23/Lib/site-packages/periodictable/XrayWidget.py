#!/usr/bin/env python

import Tkinter as Tk
import sys
import AppPrint, prnconf
import tkMessageBox

Defaults = {
	'width':	350,
	'height':	450,
	'info_height':	350,
	'xsec_height':	100,
	'titlecolor':	'blue',
	'titlefont':	'Helvetica -13 bold',
	'labelfont':	'Helvetica -10 italic',
	'valuefont':	'Times -11 bold',
	'labelcolor':	'black',
	'valuecolor':	'black'
}

	
class XrayCanvas(Tk.Canvas):

    def __init__(self, master=None, xray=None, showinfo=1, 
			showxsection=1, showenergy=1, energy=None, cnf={}, **kw):
	""" XrayCanvas constructor. Parameters:
		master (None): master widget
		xray (None): xray properties dictionnary (instance of class Xray)
		showinfo (1): show Xray properties or not
		showxsection (1): show Xsection or not
		showenergy (1): add a button to compute new energy
		energy (None): first energy to compute Xsection
	"""
	# --- create master if necessary
	if not master:
	    self.__isorphan= 1
	    if Tk._default_root:
		self.master = Tk.Toplevel(Tk._default_root)
		self.__isroot= 0
	    else:
		self.master = Tk.Tk(className='Xray')
		self.__isroot= 1
	else:
	    self.master= master
	    self.__isorphan= 0
	    self.__isroot= 0


	# --- import Xray dictionnary
	if not xray:
	    import Xray
	    self.data= Xray.Xray()[1]
	else:
	    self.data= xray

	# --- compute Xsection
	if energy is not None:
	    self.__energy(energy)
	else:
	    self.xsection= None
	    self.energy= None

	# --- display options
	self.showinfo= showinfo
	self.showxsection= showxsection
	if not self.showxsection:
	    self.showenergy= 0
	else:
	    self.showenergy= showenergy

	# --- create main canvas
	self.options= Defaults
	self.width= self.options['width']
	self.height= 0
	if self.showinfo:	self.height+= self.options['info_height']
	if self.showxsection:	self.height+= self.options['xsec_height']
	Tk.Canvas.__init__(self, self.master, kw, width=self.width, height=self.height)

	# --- buld canvas and buttons
	self.__build_init()
	if self.showenergy:	self.__build_energy()
	if self.showinfo:	self.__build_info()
	if self.showxsection:	self.__build_xsection()

	if self.__isorphan:
	    self.master.title('%s (%d) - Xray properties'%(self.data['symbol'], self.data['Z']))
	    self.pack(fill='both',expand='yes')
	    self.__build_button()
	if self.__isroot:
	    self.master.mainloop()


    def printps(self, filename=None):
	""" Create or print a PostScript
	"""
	if filename: 
	   self.postscript(file=filename, pagex=200, pagey=300)
	else:
    	   dict = {'Graph': (self, XrayCanvas.printps)}
	   conf = prnconf.PrintConfig()
	   AppPrint.AppPrint(self, text='', dict=dict, prnconf=conf)

    def close(self):
	""" Close the widget 
	"""
	self.destroy()
	if self.__isorphan:
	    self.master.destroy()
	
    def __build_button(self):
	""" Add command button at the bottom of the canvas
	"""
	self.ButtonBox= Tk.Frame(self.master, name='buttonbox', bd=2, relief='ridge')
	Tk.Button(self.ButtonBox, command=lambda self=self: XrayCanvas.printps(self), text='Print')\
			.grid(row=0, column=0, sticky='ew')
	Tk.Button(self.ButtonBox, command=lambda self=self: XrayCanvas.close(self), text='Close')\
			.grid(row=0,column=1, sticky='ew')
	self.ButtonBox.pack(fill='both', expand='yes')

    def __build_energy(self):
	""" Add energy button at the top of the canvas
	"""
	self.EnergyBox= Tk.Frame(self.master, name='energybox', bd=2, relief='ridge')
	Tk.Label(self.EnergyBox, text='Energy (in keV) :').grid(row=0, column=0)
	self.envar= Tk.Entry(self.EnergyBox, bg='white', state='normal', width=8)
	self.envar.grid(row=0, column=1)
	self.envar.bind('<Return>', self.__energy_cmd)
	if self.energy:	
	    self.envar.insert(1, self.energy) 
	self.enbut= Tk.Button(self.EnergyBox, command=lambda self=self: XrayCanvas.__energy_cmd(self), 
				text='Compute')
	self.enbut.grid(row=0, column=2)
	self.EnergyBox.pack(fill='both', expand='yes')

    def __build_init(self):
	""" define x, y on the canvas
	"""
	self.x= [self.width/2, [15, self.width/4], [self.width/2, 3*self.width/4-15], self.width-15]
	self.y= 12

    def __build_info(self):
	""" Add Xray properties on the canvas
	"""
	self.__title(1, 'Element')
	self.__labelvalue(1, 3, 'Element    :',	'%s '%self.data['name'])
	self.__labelvalue(1, 4, 'Symbol     :',	'%s'%self.data['symbol'])
	self.__labelvalue(1, 5, 'At. number :',	'%s'%self.data['Z'])
	idx= 3
	if self.data.has_key('density'):
	    self.__labelvalue(2, idx, 'Density    :', '%.4e (g/cm^3)'%self.data['density'])
	    idx+=1
	if self.data.has_key('weight'):
	    self.__labelvalue(2, idx, 'At. weight :',	'%.4e (g/mole)'%self.data['weight'])
	    idx+=1
	if self.data.has_key('conv_fac'):
	    self.__labelvalue(2, idx, 'Conversion :',  '%.4e'%self.data['conv_fac'])
	    self.__label(2, idx+1, '(cm^2/g to barns/atom)')

	if self.data.energy() is not None:
	    self.__title(9, 'Edge energies (in keV)')
	    self.__labelvalue(1, 11, 'K  =', '%.5e'%self.data['k_edge'])
	    self.__labelvalue(1, 12, 'L1 =', '%.5e'%self.data['l1_edge'])
	    self.__labelvalue(1, 13, 'L2 =', '%.5e'%self.data['l2_edge'])
	    self.__labelvalue(1, 14, 'L3 =', '%.5e'%self.data['l3_edge'])
	    self.__labelvalue(1, 15, 'M  =', '%.5e'%self.data['m_edge'])
	    self.__labelvalue(2, 11, 'Ka =', '%.5e'%self.data['ka_edge'])
	    self.__labelvalue(2, 12, 'Kb =', '%.5e'%self.data['kb_edge'])
	    self.__labelvalue(2, 13, 'La =', '%.5e'%self.data['la_edge'])
	    self.__labelvalue(2, 14, 'Lb =', '%.5e'%self.data['lb_edge'])

	if self.data.jump() is not None:
	    self.__title(18, 'Edge jumps')
	    self.__labelvalue(1, 20, 'L1 =', '%.5e'%self.data['l1_jump'])
	    self.__labelvalue(1, 21, 'L2 =', '%.5e'%self.data['l2_jump'])
	    self.__labelvalue(2, 20, 'L3 =', '%.5e'%self.data['l3_jump'])

	if self.data.fluo() is not None:
	    self.__title(24, 'Fluorescence yield')
	    self.__labelvalue(1, 26, 'K  =', '%.5e'%self.data['k_fluo'])
	    self.__labelvalue(1, 27, 'L1 =', '%.5e'%self.data['l1_fluo'])
	    self.__labelvalue(2, 26, 'L2 =', '%.5e'%self.data['l2_fluo'])
	    self.__labelvalue(2, 27, 'L3 =', '%.5e'%self.data['l3_fluo'])


    def __build_xsection(self):
	""" Add Xsection on the canvas
	"""
	self.xsecttext= []
	if self.showinfo:	
	    line= 30
	else:	
	    line= 0
	if self.xsection is not None:
	    self.xsecttext+=self.__title(line+1, 'Cross-Sections at E= %.4f keV'%self.energy)
	    if self.xsection.has_key('error'):
		self.xsecttext+=self.__labelvalue(1, line+3, 'ERROR =>', self.xsection['error'])
	    else:
		self.xsecttext+=self.__labelvalue(1, line+3, 'Photoelectric :', '%.5e'%self.xsection['photoelectric'])
		self.xsecttext+=self.__labelvalue(1, line+4, 'Coherent :', 	    '%.5e'%self.xsection['coherent'])
		self.xsecttext+=self.__labelvalue(1, line+5, 'Incoherent :',    '%.5e'%self.xsection['incoherent'])
		self.xsecttext+=self.__labelvalue(1, line+6, 'TOTAL ==>', 	    '%.5e'%self.xsection['total'])
		self.xsecttext+=self.__labelvalue(2, line+3, 'Absorption :',    '%.5e'%self.xsection['absorption'])
		if self.xsection.has_key('warning'):
		    self.xsecttext+=self.__labelvalue(1, line+8, 'WARNING =>', self.xsection['warning'])
	else:
	    if self.energy is None:
		self.xsecttext+=self.__title(line+1, 'Cross-Sections')
		self.xsecttext+=[self.__label(1, line+3, 'Enter energy to compute cross-sections')]

    def setenergy(self, energy):
	""" Compute new Xsection for the given energy.
	    Refresh the Xsection part on the canvas
	"""
	self.__energy(energy)
	for item in self.xsecttext:
	    self.delete(item)
	self.__build_xsection()
	
    def __energy(self, energy):
	""" Compute new xsection
	"""
	self.xsection= self.data.xsection(energy, 'c')
	self.energy= energy

    def __energy_cmd(self, event=None):
	""" Get the energy entry value, compute new Xray section
	    and update the canvas
	"""
	txt= self.envar.get()
	if len(txt):
	    try:
		en= float(txt)
	    	self.setenergy(en)
	    except:
		tkMessageBox.showerror("Compute Xsection", "ERROR - wrong energy")
		self.envar.delete(0, 'end')
		return

	
    def __title(self, line, text):
	""" Add a title on the canvas
	"""
	txt= self.create_text(self.x[0], line*self.y, text=text,
			 fill=self.options['titlecolor'], font=self.options['titlefont'])
	line= self.create_line(self.x[1][0], (line+1)*self.y, self.x[3], (line+1)*self.y)
	return [txt, line]

    def __labelvalue(self, col, line, text, value):
	""" Add a label and an associated value on the canvas
	"""
	return [self.__label(col, line, text), self.__value(col, line, value)]

    def __label(self, col, line, text):	
	""" Add a label on the canvas
	"""
	return self.create_text(self.x[col][0], line*self.y, anchor='w', fill=self.options['labelcolor'],
			 font=self.options['labelfont'], text=text)

    def __value(self, col, line, value):
	""" Add a value on the canvas
	"""
	return self.create_text(self.x[col][1], line*self.y, anchor='w', fill=self.options['valuecolor'],
			 font=self.options['valuefont'], text=value)


if __name__=='__main__':
    import Xray

    data= Xray.Xray()
    dict= data['Zn']

    print 'With default options:'
    cvs= XrayCanvas(xray=dict, background='white')
    print '...done'
    print 'With only showinfo off:'
    cvs= XrayCanvas(xray=dict, showenergy=1, showxsection=1, showinfo=0, energy= 14.5, background='white')
    print '...done'
    print 'Bye ...'
