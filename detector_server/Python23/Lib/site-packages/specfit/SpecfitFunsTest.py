import SpecfitFuns
def funstest(n_scan=21):
    import sys
    import time
    from specfile import *
    from Numeric import *
    import SpecfitFuns
    sys.path.append("/bliss/users/sole/Python/SPECPLOT/pysrc")
    from MyBlissgraph import *
    from Tkinter import *
    import Gefit
    #xx=arange(1000.)
    #xs=['X',xx]
    #yy=10.*xx+10+10000*exp(-0.5*(xx-500)*(xx-500)/100)
    sf = Specfile('/bliss/users/rey/data/31oct98')
    scan = sf.select(`n_scan`+'.1')
    xx = scan[0]
    xs=['X',xx]
    yy = scan[21]
    data1=['data1','X',yy]
    st=time.time()
    zz=SpecfitFuns.subac(yy,1.0001,1000)
    #zz=SpecfitFuns.subac(yy,0.9,25)
    et=time.time()
    print 'It took ', et-st,'seconds'
    data2=['data2','X',zz]
    ########### attempt a fit just to gaussians #########
    npoints=len(zz)    
    peaks = SpecfitFuns.seek(yy,1,len(zz),10)
    if len(peaks) > 0:
        j = 0
        for i in peaks:
            if j == 0:
                sig=10*abs(xx[npoints-1]-xx[0])/npoints
                param = array([yy[int(i)] - zz [int(i)], xx[int(i)] ,sig])
            else:
                param2 = array([yy[int(i)] - zz [int(i)], xx[int(i)] ,sig])
                param = concatenate((param,param2),1)
            j = j + 1
        print param       
        xw=resize(xx,(npoints,1))
        sy = sqrt(abs(yy))
        yy=resize(yy-zz,(npoints,1))
        sy=resize(sy,(npoints,1)) 
        datawork = concatenate((xw, yy, sy),1)
        stime = time.time()
        fittedpar, chisq, sigmapar = Gefit.LeastSquaresFit(fitfun,param,datawork)
        etime = time.time()
        print "Took ",etime - stime, "seconds"
        print "chi square  = ",chisq
        print "Fitted pars = ",fittedpar
        print "Sigma pars  = ",sigmapar
        ff=fitfun(array(fittedpar),xx)+zz
    else:
        ff=zz
    data3=['data3','X',ff.tolist()]

    ###########
    root= Tk()
    app=Blissgraph(root)
    app.setx(xs)
    app.sety(data1)
    app.sety(data2)
    app.sety(data3)
    root.geometry("500x400+50+50")
    app.pack(fill='both',expand='yes')
    root.mainloop()
def fitfun(p,x):
    return SpecfitFuns.gauss(p,x)


if __name__ == '__main__':
    funstest()
