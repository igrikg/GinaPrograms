#!/usr/bin/env python
##########################################################################
# File:         printf2re.py
# $Header: /segfs/bliss/source/python/utils/RCS/printf2re.py,v 1.0 2002/11/26 10:06:04 ahoms Rel $
# Project:      Bliss Python modules
# Desc:         Implement sscanf converting printf formats in re patterns
# Author(s):    A. Homs (ahoms@esrf.fr)
#
# $Log: printf2re.py,v $
# Revision 1.0  2002/11/26 10:06:04  ahoms
# Added PrintfFormat
#
# Revision 0.1  2002/01/29 12:00:00  ahoms
# Initial release
#
##########################################################################

import string, re

def xformsimple(str):
	new = ''
	for chr in str:
		if chr in ' \t':
			new += '[ \t]+'
			continue
		
		if chr in '.\\$*?+^[]{}|':
			new += '\\'
		new += chr

	return new

def printf2re(format):
	if '%' not in format:
		return xformsimple(format), []

	prefix_str = '(?P<prefix>[^%]+)?'
	conv_str = '%(?P<flags>[-+0 ]+)?(?P<width>[1-9][0-9]*)?' \
		   '(.(?P<prec>[0-9]+))?(?P<lenmod>[hlL])?' \
		   '(?P<convchar>[diouxXeEfFgGcrs%])'
	suffix_str = '(?P<suffix>[^%]+)?'
	conv_obj = re.compile(prefix_str + conv_str + suffix_str)

	format_pos = conv_idx = 0
	re_str = ''
	end_str = ''
	group_conv = []
	while 1:
		m = conv_obj.match(format, format_pos)
		if (m is None) or (m.group('convchar') is None):
			break

		convchar = m.group('convchar')
		if conv_idx > 0 and convchar != '%':
			re_str += '('
			
		if m.group('prefix'):
			re_str += xformsimple(m.group('prefix'))

		if convchar == '%':
			re_str += '%'
		else:
			groupname = 'conv%d' % conv_idx
			conv_idx = conv_idx + 1
			conv = '(?P<%s>' % groupname
			
			if convchar in 'du':
				conv += '[+-]?[0-9]+'
			elif convchar in 'o':
				conv += '[0-7]+'
			elif convchar in 'xX':
				conv += '[0-9a-fA-F]+'
			elif convchar in 'i':
				conv += '(0[xX]?)?[0-9a-fA-F]+'
			elif convchar in 'eEfFgG':
				conv += '[+-]?[0-9]*(\\.[0-9]+)?' \
                                        '([eE][+-]?[0-9]+)?'
			else:
				conv += '[^ \t]+'

			re_str += conv + ')'
			if conv_idx > 1 and convchar != '%':
				end_str = ')?' + end_str

			group_conv.append((groupname, convchar))

		format_pos = m.end('convchar')

		if m.group('suffix'):
			re_str += xformsimple(m.group('suffix'))
			format_pos = m.end('suffix')

		
	if len(re_str) == 0:
		raise SyntaxError, \
			      'Could not analyze format string: %s' % format

	re_str += end_str
	return re_str, group_conv


class PrintfFormat:
	def __init__(self, format):
		if '%' not in format:
			raise SyntaxError, 'PrintfFormat without "%" sequence'
		
		self.re_str, self.group_conv = printf2re(format)
		self.re_obj = re.compile(self.re_str)
		self.format = format

	def sscanf(self, str):
		result = []
		m = self.re_obj.match(str)
		if not m:
			return result

		for grp_name, conv_char in self.group_conv:
			grp_res = m.group(grp_name)
			if grp_res is None:
				break

			if conv_char in 'crs':
				result.append(grp_res)
				continue

			int_conv = {'i': 0, 'o': 8, 'du': 10, 'xX': 16}
			found = ok = 0
			for conv_list, base in int_conv.items():
				if conv_char in conv_list:
					found = 1
					try:	nr = string.atoi(grp_res, base)
					except: break

					ok = 1
					result.append(nr)
					break
			if found:
				if ok:  continue
				else:   break
				
			if conv_char in 'eEfFgG':
				try:    nr = float(grp_res)
				except: break

				result.append(nr)
				continue
			
			raise 'Error: PrintfFormat: conversion character %c ' \
			      'not implemented' % conv_char
			
		return result

	
if __name__ == '__main__':

	print 'Testing xformsimple ...'
	print 'xformsimple(\'1234 567. $%[\'): \'', \
	      xformsimple('1234 567. $%['), '\''

	print '\nTesting printf2re ...'
	str = 'btp%d'
	re_str, group_conv = printf2re(str)
	print 'printf2rd(%s): %s' % (str, re_str)
	
	obj = re.compile(re_str)
	m = obj.match('btp130')
	if m:
		for gname, convchar in group_conv:
			print m.group(gname), convchar

	print '\nStill testing printf2re ...'
	str = 'btp%02x.43'
	re_str, group_conv = printf2re(str)
	print 'printf2rd(%s): %s' % (str, re_str)
	
	obj = re.compile(re_str)
	m = obj.match('btp3f.43')
	if m:
		for gname, convchar in group_conv:
			print m.group(gname), convchar

	print '\nEven more tests on printf2re ...'
	str = 'btp%02x.43%%- %s'
	re_str, group_conv = printf2re(str)
	print 'printf2rd(%s): %s' % (str, re_str)
	
	obj = re.compile(re_str)
	m = obj.match('btp3f.43%-\testo_no_me_interesa')
	if m:
		for gname, convchar in group_conv:
			print m.group(gname), convchar


	print '\nTesting PrintfFormat ...'
	format = PrintfFormat('btp%02x.43%%- %s ahora')
	print format.re_str
	print format.sscanf('btp3f.43%-\testo_no_me_interesa ahora')


	print '\nMore tests on PrintfFormat ...'
	format = PrintfFormat('%x')
	print '%x' % format.sscanf('1234ABCD')[0]
