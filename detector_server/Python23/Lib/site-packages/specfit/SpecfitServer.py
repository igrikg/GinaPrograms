from TacoServer  import *
from Numeric import *
import EventHandler
#import SpecGraph
import Specfit
#import SpecFunctions
import string
from Tkinter import *
import imp,os
#import BalloonWidget


DEBUG=0

class SpecfitServer (TacoServer):
    "This is a TacoServer class"
    SpecfitBase                 = 0
    SpecfitStatus               = SpecfitBase + 1
    SpecfitSearchArray         = SpecfitBase + 2
    SpecfitFitArray             = SpecfitBase + 3
    SpecfitFitMcaArray             = SpecfitBase + 4
    SpecfitGetConfig            = SpecfitBase + 5
    SpecfitSetConfig            = SpecfitBase + 6
    SpecfitGetFunList            = SpecfitBase + 7
    SpecfitGetBkgList            = SpecfitBase + 8

#    Common variables for a class
    cmd_list = {SpecfitStatus:        [D_VOID_TYPE, D_STRING_TYPE, 'status','SpecfitStatus'],
             SpecfitSearchArray:    [D_VAR_FLOATARR, D_VAR_FLOATARR, 'searcharray','SpecfitSearchArray'],
             SpecfitFitArray:    [D_VAR_FLOATARR, D_STRING_TYPE,'fitarray','SpecfitFitArray'],
             SpecfitFitMcaArray:    [D_VAR_FLOATARR, D_STRING_TYPE,'dofit','SpecfitFitMcaArray'],
             SpecfitGetConfig: [D_VOID_TYPE, D_STRING_TYPE,'getServerconfiguration','SpecfitGetConfig'],
             SpecfitSetConfig: [D_STRING_TYPE, D_FLOAT_TYPE,'configureServer','SpecfitSetConfig']}
    class_name = "SpecfitServer TacoServer Class"
        
    def __init__ (self, devicename,eh=None):
        print "call to taco"
        TacoServer.__init__ (self, devicename)
        print "back from taco"
        #res = dev_getresource (self.dev_name, "value")
        #res=456
        
        if eh is None:
            self.eh = EventHandler.EventHandler()
        else:
            self.eh = eh
        self.specfit = Specfit.Specfit(eh=self.eh) 
        #copy specfit configure method for direct access
        self.configure=self.specfit.configure
        self.fitconfig=self.specfit.fitconfig
        self.specfit.importfun("SpecfitFunctions.py")
        self.setdata=self.specfit.setdata
        self.guiconfig=None


        #configure
        #if config:
        if 1:
            self.funevent(self.specfit.theorylist[0])
            self.bkgevent(self.specfit.bkgdict.keys()[0])
            #configuration={}
            #configuration.update(self.configure())
        
        
    def configureServer(self,configurationstring):
        configuration=self.configure()
        #split the newconfiguration
        stringlist=string.split(configurationstring,":")
        newconfiguration={}
        newconfiguration.update(configuration)
        try:
            for i in range(len(stringlist)/2):        
                newconfiguration[stringlist[2*i]] = stringlist[2 * i + 1]
            newconfiguration['FwhmPoints']=int(float(newconfiguration['FwhmPoints']))
            newconfiguration['Sensitivity']=float(newconfiguration['Sensitivity'])
            newconfiguration['Yscaling']=float(newconfiguration['Yscaling'])
        except:            
            return -1
        configuration.update(self.configure(**newconfiguration))   
        return 0

    def getServerconfiguration(self):
        configuration=self.configure()
        configurationstring=""
        for key,item in configuration.items():
            if configurationstring != "":
                configurationstring="%s:%s:%s" % (configurationstring,key,item)
            else:
                configurationstring= "%s:%s" % (key,item)   
        return configurationstring


    def estimate(self):
        if self.specfit.fitconfig['McaMode']:
            try:
                mcaresult=self.specfit.mcafit()
            except:
                print "Error on mcafit"
                return
        else:
            #try:
            self.specfit.estimate()
            #except:
            #    print "Error on estimate"
            #    return
        return
    
    def startfit(self):
        if self.specfit.fitconfig['McaMode']:
            try:
                mcaresult=self.specfit.mcafit()
                print mcaresult
            except:
                print "Error on mcafit"
                return
            #give back mcaresult
        else:
            #initial parameters?
            try:
                self.specfit.startfit()
                print self.specfit.paramlist
            except:
                print "Error on startfit"
                return
            #give back self.specfit.paramlist
        return
    
    def mcaevent(self,item):
        if int(item):
            self.configure(McaMode=1)
        else:
            self.configure(McaMode=0)
        self.__initialparameters() 
        return

    def weightevent(self,item):
        if int(item):
            self.configure(WeightFlag=1)
        else:
            self.configure(WeightFlag=0)
        return

    def autofwhmevent(self,item):
        if int(item):
            self.configure(AutoFwhm=1)
        else:
            self.configure(AutoFwhm=0)
        return

    def autoscaleevent(self,item):
        if int(item):
            self.configure(AutoScaling=1)
        else:
            self.configure(AutoScaling=0)
        return
    
    def bkgevent(self,item):
        item=str(item)
        if item in self.specfit.bkgdict.keys():
            self.specfit.setbackground(item)
        else:
            print " Funtion not implemented"
            i=1+self.specfit.bkgdict.keys().index(self.specfit.fitconfig['fitbkg'])
            self.guiconfig.BkgComBox.setCurrentItem(i)
        self.__initialparameters()
        return

    def funevent(self,item):
        item=str(item)
        if item in self.specfit.theorylist:
            self.specfit.settheory(item)
        else:
            print " Funtion not yet implemented"
            i=1+self.specfit.theorylist.index(self.specfit.fitconfig['fittheory'])
            self.guiconfig.FunComBox.setCurrentItem(i)
        self.__initialparameters()
        return
    
    def __initialparameters(self):
        self.specfit.final_theory=[]
        self.specfit.paramlist=[]
        for pname in self.specfit.bkgdict[self.specfit.fitconfig['fitbkg']][1]:
            self.specfit.final_theory.append(pname)
            self.specfit.paramlist.append({'name':pname,
                                       'estimation':0,
                                       'group':0,
                                       'code':'FREE',
                                       'cons1':0,
                                       'cons2':0,
                                       'fitresult':0.0,
                                       'sigma':0.0,
                                       'xmin':None,
                                       'xmax':None})
        for pname in self.specfit.theorydict[self.specfit.fitconfig['fittheory']][1]:
            self.specfit.final_theory.append(pname+`1`)
            self.specfit.paramlist.append({'name':pname+`1`,
                                       'estimation':0,
                                       'group':1,
                                       'code':'FREE',
                                       'cons1':0,
                                       'cons2':0,
                                       'fitresult':0.0,
                                       'sigma':0.0,
                                       'xmin':None,
                                       'xmax':None})
        return

    def fitstatus(self,data):
        if data.has_key('chisq'):
            if data['chisq'] is None:
                self.guistatus.ChisqLine.setText(" ")
            else:
                chisq=data['chisq']
                self.guistatus.ChisqLine.setText("%6.2f" % chisq)
            
        if data.has_key('status'):
            status=data['status']
            self.guistatus.StatusLine.setText(str(status))
        return

    def searcharray (self, x):
        #
        # A copy to a new tuple is needed here!!!
        # self.array = x
        # will result in a memory fault when
        # executing read_signals!
        #    
        #self.array = ()
        #for i in x:
        #    self.array = self.array + (i, )
        pyarray=array(map(string.atof,x))
        xdata=pyarray[0:len(pyarray):2]
        ydata=pyarray[1:len(pyarray):2]
        self.setdata(x=xdata,y=ydata)
        argout=[0]
        try:
            self.specfit.estimate()
            for param in self.specfit.paramlist:
                pname=param['name']
                if string.find(pname,'Position') != -1:
                    argout.append(param['estimation'])
                    argout[0] += 1
        except:
            argout[0]=-1
            return argout
        return argout
        
if __name__ == "__main__":
       if len(sys.argv) > 1:
            try:
                print sys.argv[1]
                dev=SpecfitServer(sys.argv[1])
                server_startup((dev,),nodb=1,pn=5000003)
                import time
                while(1):
                    time.sleep(1000)
            except KeyboardInterrupt:
                print "Exit on KeyboardInterrupt"
                sys.exit
       else:
            print "Usage: SpecfitServer devicename"
            print sys.argv
 
