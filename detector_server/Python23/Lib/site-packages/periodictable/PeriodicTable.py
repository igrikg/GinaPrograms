#!/usr/bin/env python
"""
Module: PeriodicTable

Description: Periodic Table of the elements
	Can be used as a standalone window, as a dialog box,
	or included in another application as a canvas.

Dependencies: EventHandler, TkTools

Author:	Vicente Rey
Version: %(__version__)

Upgrades:
	20/03/2001: E.Papillon
	Add possibility to add user-defined marks on the table

"""
#---------------------------------------------------------------------------
#
#    File:  PeriodicTable.py
#
#    Description:   Periodic Table of the elements
#
#---------------------------------------------------------------------------
#

import Tkinter as Tk
import TkTools, string, sys
import tkSimpleDialog
import types
from UserDict import UserDict

import EventHandler

defoptions = [
   ['*periodictable.title',              'Periodic Table' ],
   ['*periodictable.titlecolor',         '#ff9900' ],
   ['*periodictable.mode',               'multiple'], 
   ['*periodictable.message',            'yes'], 
   ['*periodictable.width',              600],
   ['*periodictable.height',             360],
   ['*periodictable.element_background', '#eeeecc'],
   ['*periodictable.element_foreground', '#990000'],
   ['*periodictable.element_outline',    'red'], 
   ['*periodictable.select_background',  'blue'],
   ['*periodictable.select_foreground',  'white'],
   ['*periodictable.over_background',    'magenta'],
   ['*periodictable.over_foreground',    'white'],
   ['*periodictable.mark_background',    'red'],
   ['*periodictable.mark_foreground',    'black'],
   ['*periodictable.titlefont',          'Helvetica -30 bold'], 
   ['*periodictable.messagecolor',       'black'], 
   ['*periodictable.messagefont',        'Helvetica -15 italic'], 
   ['*periodictable.symbolfont',         'Times -15 bold'], 
   ['*periodictable.numberfont',         'Arial -10'], 
   ['*periodictable*fill',               'Blue'], 
]

dialogoptions = [
   ['*dialogseparator.background',          '#ffffff'],
   ['*dialogbuttonbox*background',          '#ffffff'],
   ['*dialogseparator.bd',                  2],
   ['*dialogseparator.height',              2],
   ['*dialogseparator.relief',             'raised'],
   ['*dialogseparator.pady',                5],
   ['*dialogbuttonbox.okbutton.text',      'Ok'],
   ['*dialogbuttonbox.okbutton.width',      5],
   ['*dialogbuttonbox.cancelbutton.text',  'Cancel'],
   ['*dialogbuttonbox.cancelbutton.width',  5],
]                                    

#
# Element table
#
# Colums are:
#
#   Symbol  Atomic Number   x y ( positions on table )
#       name,  mass, density 
#
elements = [
   ["H",   1,    1,1,   "hydrogen",   1.00800,     1008.00   ],
   ["He",  2,   18,1,   "helium",     4.00300,     0.118500  ],
   ["Li",  3,    1,2,   "lithium",    6.94000,     534.000   ],
   ["Be",  4,    2,2,   "beryllium",  9.01200,     1848.00   ],
   ["B",   5,   13,2,   "boron",      10.8110,     2340.00   ],
   ["C",   6,   14,2,   "carbon",     12.0100,     1580.00   ],
   ["N",   7,   15,2,   "nitrogen",   14.0080,     1.25      ],
   ["O",   8,   16,2,   "oxygen",     16.0000,     1.429     ],
   ["F",   9,   17,2,   "fluorine",   19.0000,     1108.00   ],
   ["Ne",  10,  18,2,   "neon",       20.1830,     0.9       ],
   ["Na",  11,   1,3,   "sodium",     22.9970,     970.000   ],
   ["Mg",  12,   2,3,   "magnesium",  24.3200,     1740.00   ],
   ["Al",  13,  13,3,   "aluminium",  26.9700,     2720.00   ],
   ["Si",  14,  14,3,   "silicon",    28.0860,     2330.00   ],
   ["P",   15,  15,3,   "phosphorus", 30.9750,     1820.00   ],
   ["S",   16,  16,3,   "sulphur",    32.0660,     2000.00   ],
   ["Cl",  17,  17,3,   "chlorine",   35.4570,     1560.00   ],
   ["Ar",  18,  18,3,   "argon",      39.9440,     1.78400   ],
   ["K",   19,   1,4,   "potassium",  39.1020,     862.000   ],
   ["Ca",  20,   2,4,   "calcium",    40.0800,     1550.00   ],
   ["Sc",  21,   3,4,   "scandium",   44.9600,     2992.00   ],
   ["Ti",  22,   4,4,   "titanium",   47.9000,     4540.00   ],
   ["V",   23,   5,4,   "vanadium",   50.9420,     6110.00   ],
   ["Cr",  24,   6,4,   "chromium",   51.9960,     7190.00   ],
   ["Mn",  25,   7,4,   "manganese",  54.9400,     7420.00   ],
   ["Fe",  26,   8,4,   "iron",       55.8500,     7860.00   ],
   ["Co",  27,   9,4,   "cobalt",     58.9330,     8900.00   ],
   ["Ni",  28,  10,4,   "nickel",     58.6900,     8900.00   ],
   ["Cu",  29,  11,4,   "copper",     63.5400,     8940.00   ],
   ["Zn",  30,  12,4,   "zinc",       65.3800,     7140.00   ],
   ["Ga",  31,  13,4,   "gallium",    69.7200,     5903.00   ],
   ["Ge",  32,  14,4,   "germanium",  72.5900,     5323.00   ],
   ["As",  33,  15,4,   "arsenic",    74.9200,     5.73000   ],
   ["Se",  34,  16,4,   "selenium",   78.9600,     4790.00   ],
   ["Br",  35,  17,4,   "bromine",    79.9200,     3120.00   ],
   ["Kr",  36,  18,4,   "krypton",    83.8000,     3.74000   ],
   ["Rb",  37,   1,5,   "rubidium",   85.4800,     1532.00   ],
   ["Sr",  38,   2,5,   "strontium",  87.6200,     2540.00   ],
   ["Y",   39,   3,5,   "yttrium",    88.9050,     4405.00   ],
   ["Zr",  40,   4,5,   "zirconium",  91.2200,     6530.00   ],
   ["Nb",  41,   5,5,   "niobium",    92.9060,     8570.00   ],
   ["Mo",  42,   6,5,   "molybdenum", 95.9500,     10220.00  ],
   ["Tc",  43,   7,5,   "technetium", 99.0000,     11500.0   ],
   ["Ru",  44,   8,5,   "ruthenium",  101.0700,    12410.0   ],
   ["Rh",  45,   9,5,   "rhodium",    102.9100,    124400    ],
   ["Pd",  46,  10,5,   "palladium",  106.400,     12160.0   ],
   ["Ag",  47,  11,5,   "silver",     107.880,     10500.00  ],
   ["Cd",  48,  12,5,   "cadmium",    112.410,     8650.00   ],
   ["In",  49,  13,5,   "indium",     114.820,     7280.00   ],
   ["Sn",  50,  14,5,   "tin",        118.690,     5310.00   ],
   ["Sb",  51,  15,5,   "antimony",   121.760,     6691.00   ],
   ["Te",  52,  16,5,   "tellurium",  127.600,     6240.00   ],
   ["I",   53,  17,5,   "iodine",     126.910,     4940.00   ],
   ["Xe",  54,  18,5,   "xenon",      131.300,     5.90000   ],
   ["Cs",  55,   1,6,   "caesium",    132.910,     1873.00   ],
   ["Ba",  56,   2,6,   "barium",     137.360,     3500.00   ],
   ["La*", 57,   3,6,   "lanthanum",  138.920,     6150.00   ],
   ["Ce",  58,   4,9,   "cerium",     140.130,     6670.00   ],
   ["Pr",  59,   5,9,   "praseodymium",140.920,    6769.00   ],
   ["Nd",  60,   6,9,   "neodymium",  144.270,     6960.00   ],
   ["Pm",  61,   7,9,   "promethium", 147.000,     6782.00   ],
   ["Sm",  62,   8,9,   "samarium",   150.350,     7536.00   ],
   ["Eu",  63,   9,9,   "europium",   152.000,     5259.00   ],
   ["Gd",  64,  10,9,   "gadolinium", 157.260,     7950.00   ],
   ["Tb",  65,  11,9,   "terbium",    158.930,     8272.00   ],
   ["Dy",  66,  12,9,   "dysprosium", 162.510,     8536.00   ],
   ["Ho",  67,  13,9,   "holmium",    164.940,     8803.00   ],
   ["Er",  68,  14,9,   "erbium",     167.270,     9051.00   ],
   ["Tm",  69,  15,9,   "thulium",    168.940,     9332.00   ],
   ["Yb",  70,  16,9,   "ytterbium",  173.040,     6977.00   ],
   ["Lu",  71,  17,9,   "lutetium",   174.990,     9842.00   ],
   ["Hf",  72,   4,6,   "hafnium",    178.500,     13300.0   ],
   ["Ta",  73,   5,6,   "tantalum",   180.950,     16600.0   ],
   ["W",   74,   6,6,   "tungsten",   183.920,     19300.0   ],
   ["Re",  75,   7,6,   "rhenium",    186.200,     21020.0   ],
   ["Os",  76,   8,6,   "osmium",     190.200,     22500.0   ],
   ["Ir",  77,   9,6,   "iridium",    192.200,     22420.0   ],
   ["Pt",  78,  10,6,   "platinum",   195.090,     21370.0   ],
   ["Au",  79,  11,6,   "gold",       197.200,     19370.0   ],
   ["Hg",  80,  12,6,   "mercury",    200.610,     13546.0   ],
   ["Tl",  81,  13,6,   "thallium",   204.390,     11860.0   ],
   ["Pb",  82,  14,6,   "lead",       207.210,     11340.0   ],
   ["Bi",  83,  15,6,   "bismuth",    209.000,     9800.00   ],
   ["Po",  84,  16,6,   "polonium",   209.000,     0         ],
   ["At",  85,  17,6,   "astatine",   210.000,     0         ],
   ["Rn",  86,  18,6,   "radon",      222.000,     9.73000   ],
   ["Fr",  87,   1,7,   "francium",   223.000,     0         ],
   ["Ra",  88,   2,7,   "radium",     226.000,     0         ],
   ["Ac#", 89,   3,7,   "actinium",   227.000,     0         ],
   ["Th",  90,   4,10,  "thorium",    232.000,     11700.0   ],
   ["Pa",  91,   5,10,  "proactinium",231.03588,   0         ],
   ["U",   92,   6,10,  "uranium",    238.070,     19050.0   ],
   ["Np",  93,   7,10,  "neptunium",  237.000,     0         ],
   ["Pu",  94,   8,10,  "plutonium",  239.100,     19700.0   ],
   ["Am",  95,   9,10,  "americium",  243,         0         ],
   ["Cm",  96,  10,10,  "curium",     247,         0         ],
   ["Bk",  97,  11,10,  "berkelium",  247,         0         ],
   ["Cf",  98,  12,10,  "californium",251,         0         ],
   ["Es",  99,  13,10,  "einsteinium",252,         0         ],
   ["Fm",  100,  14,10, "fermium",    257,         0         ],
   ["Md",  101,  15,10, "mendelevium",258,         0         ],
   ["No",  102,  16,10, "nobelium",   259,         0         ],
   ["Lr",  103,  17,10, "lawrencium", 262,         0         ],
   ["Rf",  104,   4,7,  "rutherfordium",261,       0         ],
   ["Db",  105,   5,7,  "dubnium",    262,         0         ],
   ["Sg",  106,   6,7,  "seaborgium", 266,         0         ],
   ["Bh",  107,   7,7,  "bohrium",    264,         0         ],
   ["Hs",  108,   8,7,  "hassium",    269,         0         ],
   ["Mt",  109,   9,7,  "meitnerium", 268,         0         ],
]

class PeriodicTable(Tk.Canvas):
    """PeriodicTable widget.

    This class creates and manipulates periodic table widgets.
    """

    kwords = ['title', 'mode', 'message', 'titlecolor', 'messagecolor', \
              'element_width',      'element_height',    'element_outline', \
              'width','height', \
              'element_background', 'element_foreground',\
              'select_background',  'select_foreground', \
              'over_background',    'over_foreground',   \
	      'mark_background',    'mark_foreground',	'mark_initlist',   \
              'messagefont', 'titlefont', 'symbolfont', 'numberfont']

    def __init__(self,parent=None, eventhandler=None, cnf={}, **kw):

        kw  = TkTools.shiftkw(self,kw,self.kwords) 

        cnf = Tk._cnfmerge((cnf,kw))

        self.parent = parent 

        self.eh     = eventhandler

        if not parent:
           __isorphan = 1
           if Tk._default_root:
               __isroot = 0
               self.parent = Tk.Toplevel(Tk._default_root)
           else:
               self.parent = Tk.Tk(className='Periodic')
               __isroot = 1
        else:
           __isorphan = 0
           __isroot   = 0
 
        TkTools.option_setdefault(self.parent,'Periodic',defoptions)                      
        Tk.Canvas.__init__ (self,self.parent,cnf,name='periodictable')
        self.__read_options()

        self.selection = []

        #self.__build()
        self.__build_table()

        if self.eh:
             self.ElementSelect = self.eh.create('ElementSelectEvent')
             self.ElementRemove = self.eh.create('ElementRemoveEvent')

        self.bind('<Configure>',self.__resize) 
        if __isorphan:
            self.__build_menubar()
            self.pack(fill='both',expand='yes')
        if __isroot:
            self.parent.mainloop()               
    
    def export(self,filename):
        try:
           fd  = open(filename,'a')
           kws = self.__export_header(fd)
           str = ''
           for element in self.elements:
               str += "%s " % element['number']
               for kw in kws:
                  if kw  != 'number':
                    str += "%s " % element[kw]
               str += '\n'
           fd.write(str)
               
        except IOError:
           print "Cannot open %s for writing"

    def __export_header(self,fd):
        str = """#F %s

#S 1 Periodic Table Data
#N %d
#L number""" % (fd.name,len(self.elements[0]))

        kws = self.elements[0].keys()
        for kw in kws:
           if  kw  != 'number':
               str += '  %s' % kw
        str += '\n'
        fd.write(str)
        return kws 
       

    def loadfile(self,filename,scan=0,format='spec',kwords=None):
        try: 
           import specfile
           sc = specfile.Specfile(filename)[scan]
           kwords = sc.alllabels()[1:]
           for line in range(sc.lines()):
               data = sc.dataline(line+1)
               elno = int(data[0]) - 1
               dict = {} 
               for kw,val in zip(kwords,data):
                    dict[kw] = val
               self.elements[elno].update(dict)
        except IOError:
           print "Cannot open file %s for PeriodicTable" % filename 


    def get_selection(self):
        return self.selection

    def get_element(self,elem):
        if type(elem)   == types.StringType:
            elist = [ el.symbol for el in self.elements ] 
            elem  = elem.capitalize()
        elif type(elem) == types.IntType:
            elist = [ el.number for el in self.elements ] 
        else:
           raise TypeError
        return self.elements[elist.index(elem)]

    def select(self,elem):
        element = self.get_element(elem)
        element.select() 

    def reset_selection(self,elemlist): 
        for elem in self.selection:
              elem.unselect()

    def set_mark(self, Zlist=[]):
	for element in self.elements:
	    element.setmark((element.number in Zlist))
	self.__resize(None)

    def __build(self):
        self.element_width  = int(self.width / 20)
        self.element_height = int(self.height / 12)
        #self.configure(width=self.width,height=self.height)

        x0  = self.width/2 
        x1  = 20
        tit = self.create_text(x0,x1,text=self.title,fill=self.titlecolor,
                                                font=self.titlefont,tags='title')

        if self.message:
          x = 10
          y = self.height - 10 - self.element_width/2  
          self.msg = self.create_text(x,y,anchor='nw', \
                            fill=self.messagecolor, font=self.messagefont, \
                            tags='message')

    def __build_table(self):
        self.elements =  \
            [ Element(self,sy,atnb,x,y,name,(atnb in self.mark_initlist),
				{'mass':atweight,'density':density})
                       for sy, atnb, x, y, name, atweight,density in elements]

    def __build_menubar(self):
        menu1 = ["File",None,
                  ["COMMAND","Load data",self.__loadfile],
                  ["COMMAND","Export",self.__export],
                  ["SEPARATOR"],
                  ["COMMAND","Exit",self.__exit]]
        menu2 = ["Help",None,
                  ["COMMAND","Version",self.__version]]
 
        mbar = TkTools.build_menubar(self.parent,[menu1,menu2])
        mbar.pack(fill='x')

    def __read_options(self):
        self.title         = self.title      or self.option_get('title','')
        self.mode          = self.mode       or self.option_get('mode','')
        self.message       = self.message    or self.option_get('message','')
        self.titlefont     = self.titlefont  or self.option_get('titlefont','') 
        self.titlecolor    = self.titlecolor or self.option_get('titlecolor','')
        self.messagefont   = self.messagefont  or self.option_get('messagefont','') 
        self.messagecolor  = self.messagecolor or self.option_get('messagecolor','')
        self.symbolfont    = self.symbolfont or self.option_get('symbolfont','')
        self.numberfont    = self.numberfont or self.option_get('numberfont','')
        #self.element_width = self.element_width or  \
                         #string.atoi(self.option_get('element_width',''))
        #self.element_height = self.element_height or \
                         #string.atoi(self.option_get('element_height',''))
        self.width = self.width or  \
                         string.atoi(self.option_get('width',''))
        self.height = self.height or \
                         string.atoi(self.option_get('height',''))
        self.element_background = self.element_background or  \
                         self.option_get('element_background','')        
        self.element_foreground = self.element_foreground or  \
                         self.option_get('element_foreground','')        
        self.over_background   = self.over_background or  \
                         self.option_get('over_background','')        
        self.over_foreground   = self.over_foreground or  \
                         self.option_get('over_foreground','')        
        self.mark_background   = self.mark_background or  \
                         self.option_get('mark_background','')        
        self.mark_foreground   = self.mark_foreground or  \
                         self.option_get('mark_foreground','')        
        self.select_background = self.select_background or  \
                         self.option_get('select_background','')        
        self.select_foreground = self.select_foreground or \
                         self.option_get('select_foreground','')        
        self.element_outline   = self.element_outline or  \
                         self.option_get('element_outline','')        
        self.message = self.message.lower()
        if self.message == 'no':
            self.message = ''
        self.sfont = self.symbolfont 
        self.nfont = self.numberfont 
	self.mark_initlist = self.mark_initlist or []


    def select_elem(self,element):
        if self.mode == 'single':
              for elem in self.selection:
                   elem.unselect()
        self.selection.append(element)
        if self.eh:
             self.eh.event(self.ElementSelect,element)

    def unselect_elem(self,element):
        self.selection.remove(element)  
        if self.eh:
             self.eh.event(self.ElementRemove,element)

    def __resize(self,event):
        wid = self.width
        hgt = self.height
        self.width  = self.winfo_width()
        self.height = self.winfo_height()
        self.element_width  = int(self.width / 20)
        self.element_height = int(self.height / 12)
        sfont = self.sfont.split()
	sfont[1] = str( string.atoi(sfont[1]) * self.width / wid)  
        nfont = self.nfont.split()
	nfont[1] = str( string.atoi(nfont[1]) * self.width / wid)  
        self.symbolfont = string.join(sfont)
        self.numberfont = string.join(nfont)
        
        self.__redisplay() 

    def __redisplay(self):
        self.delete('title')
        self.delete('message')
        for element in self.elements:
             element.display()
        self.__build()

    def __loadfile(self):
        import tkFileDialog
        self.loadfile(tkFileDialog.askopenfilename())

    def __export(self):
        import tkFileDialog
        self.export(tkFileDialog.asksaveasfilename())

    def __exit(self):
        sys.exit(0)

    def __version(self):
        print "Version is  1.0"
                                            
         
class Element(UserDict):
    """Element class:

    This class creates and manipulates each element in the periodic table widgets.
    """

    def __init__(self,canvas,symbol,number,pos_x,pos_y,name,markinit=0,data=None,**kw):

        UserDict.__init__(self,data)

        self.__pos_x     = pos_x
        self.__pos_y     = pos_y
        self.__cvs    = canvas
        self.__selected  = 0
        self.__marked    = markinit

        self.name      = name

        if len(symbol) < 3:
           self.symbol = symbol
        else:
           self.symbol = symbol[0:2]
        self['number'] = self.number = number
        self.__tags      = "tag"+self.symbol

    def display(self):
        self.__cvs.delete(self.__tags)  
	if self.__marked:
	    bg = self.__cvs.mark_background
	    fg = self.__cvs.mark_foreground
	else:
	    bg = self.__cvs.element_background
	    fg = self.__cvs.element_foreground
        x0 = self.__pos_x * self.__cvs.element_width
        x1 = x0 + self.__cvs.element_width
        y0 = self.__pos_y * self.__cvs.element_height
        y1 = y0 + self.__cvs.element_height
        self.__rect = self.__cvs.create_rectangle(x0,y0,x1,y1, \
                       outline=self.__cvs.element_outline,   \
                       fill=bg,   \
                       tags=self.__tags)
        xt0 = x0 + self.__cvs.element_width / 2
        yt0 = y0 + self.__cvs.element_height / 2
        self.__txt0 = self.__cvs.create_text(xt0,yt0,text=self.symbol,  \
                       fill=fg, \
                       font=self.__cvs.symbolfont, \
                       tags=self.__tags)
        self.__txt1 = self.__cvs.create_text(x1-7,y0+7,text=self['number'], 
                                       font=self.__cvs.numberfont, \
                                       tags=self.__tags)
        self.__cvs.tag_bind(self.__tags,'<ButtonPress-1>',
                 lambda event,this=self:Element.toggle(this))
        self.__cvs.tag_bind(self.__tags,'<Enter>',
                 lambda event,this=self:Element.enter(this))
        self.__cvs.tag_bind(self.__tags,'<Leave>',
                 lambda event,this=self:Element.leave(this))
 
    def toggle(self):
        if self.__selected:
            self.unselect()
        else:
            self.select()
              
    def select(self):
        self.__selected = 1 
        self.__cvs.itemconfigure(self.__txt0,fill=self.__cvs.select_foreground)
        self.__cvs.itemconfigure(self.__rect,fill=self.__cvs.select_background)
        self.__cvs.select_elem(self)
           
    def unselect(self):
        self.__selected = 0
	if self.__marked:
	    self.__cvs.itemconfigure(self.__txt0,fill=self.__cvs.mark_foreground)
	    self.__cvs.itemconfigure(self.__rect,fill=self.__cvs.mark_background)
	else:
            self.__cvs.itemconfigure(self.__txt0,fill=self.__cvs.element_foreground)
            self.__cvs.itemconfigure(self.__rect,fill=self.__cvs.element_background)
        self.__cvs.unselect_elem(self)
        
    def __repr__(self):
        datastr = "%s(%d) - %s " %  \
                 ( self.symbol, self['number'], self.name )
        if self.__cvs.message == 'long':
          for key in self.data.keys():
              if  key != 'number':
                 datastr += " %s:%s" % (key,self.data[key])
        return(datastr)

    def enter(self):
        if self.__cvs.message:
             self.__cvs.itemconfigure(self.__cvs.msg,text=str(self))
        if self.__selected or self.__marked:
              return
        self.__cvs.itemconfigure(self.__txt0,fill=self.__cvs.over_foreground)
        self.__cvs.itemconfigure(self.__rect,fill=self.__cvs.over_background)
    
    def leave(self):
        if self.__selected or self.__marked:
              return
        self.__cvs.itemconfigure(self.__txt0,fill=self.__cvs.element_foreground)
        self.__cvs.itemconfigure(self.__rect,fill=self.__cvs.element_background)

    def setmark(self, value):
	if value:
	    self.__marked = 1
	else:
	    self.__marked = 0
	
    def mark(self):
	self.__marked = 1
	if self.__selected:
	    return
	self.__cvs.itemconfigure(self.__txt0,fill=self.__cvs.mark_foreground)
	self.__cvs.itemconfigure(self.__rect,fill=self.__cvs.mark_background)

    def unmark(self):
	self.__marked = 0
	if self.__selected:
	    return
	else:
	    self.__cvs.itemconfigure(self.__txt0,fill=self.__cvs.element_foreground)
	    self.__cvs.itemconfigure(self.__rect,fill=self.__cvs.element_background)

class PeriodicTableDialog(tkSimpleDialog.Dialog):
    """PeriodicTableDialog widget:

    This class creates and manipulates the periodic table widgets as a dialog box.
    """
    def __init__(self,parent,title=None,labels=None):
        self.labels = labels 
        TkTools.option_setdefault(parent,'Periodic',dialogoptions)
        tkSimpleDialog.Dialog.__init__(self,parent,title)

    def buttonbox(self):
        sep = Tk.Frame(self,name='dialogseparator',bd=2)
        box = Tk.Frame(self,name='dialogbuttonbox')

        self.okb     = Tk.Button(box,command=self.ok,name='okbutton')
        self.cancelb = Tk.Button(box,command=self.cancel,name='cancelbutton')
        
        self.bind('<Return>',self.ok)
        self.bind('<Escape>',self.cancel)
        
        self.okb.pack(side='left')
        self.cancelb.pack(side='left')
        sep.pack(fill='x',pady=3)
        box.pack(anchor='center')

    def body(self,master):
        self.bodywid = PeriodicTable(self)
        self.bodywid.pack(expand='yes',fill='both')

    def validate(self):
        self.result = self.bodywid.selection
        return 1

def askPeriodicTable():
    if not Tk._default_root: 
        root = Tk.Tk() 
        root.withdraw()
    toto = PeriodicTableDialog(Tk._default_root,title="Element Selection")
    return toto.result

if __name__ == '__main__':
    # Example 1: Periodic Table as a dialog box
    print askPeriodicTable()
    # Example 2: Periodic Table as a standalone window
    # pt  = PeriodicTable(background='#006600',message='long', \
    #            messagecolor='white',titlecolor='red',title='Tabla Periodica')

