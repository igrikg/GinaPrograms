# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Y:\linux\drivers\c111\V38WQN~T.8\CSM3DP~6\ConfigC111.ui'
#
# Created: jeu. 8. d√©c. 14:35:12 2005
#      by: The PyQt User Interface Compiler (pyuic) 3.8
#
# WARNING! All changes made in this file will be lost!
from qt import *
import sys, os, string
import getpass, os.path, shutil
import c111
import ConfigParser
from c111cfg import C111Cfg
from c111globals import C111Globals

DBG = 0
#DBG = 1

class ConfigC111Dialog(QDialog):
    def __init__(self,parent ,cfg,readonly=0,modal = 0,fl = 0):
        if( DBG == 1):
            print "ConfigC111Dialog.init: CFG NAME: ", cfg.GetName()
        QDialog.__init__(self,parent,cfg.GetName(),modal,fl)

        if not cfg:
            self.cfg = C111Cfg("New C111 Config")
            self.setName("New C111 Config Dialog")
        else:
            self.cfg = cfg
            self.setName(self.cfg.GetName() )

        self.ResolutionGfdOk = False ; 
        
        self.readonly = readonly ;
        self.glob = C111Globals()
        self.setSizeGripEnabled(1)
        self.CheckSettingsButtonGroup = QButtonGroup(self,"CheckSettingsButtonGroup")
        self.CheckSettingsButtonGroup.setGeometry(QRect(390,10,160,110))
        
        self.ResolutionComboBox = QComboBox(0,self.CheckSettingsButtonGroup,"ResolutionComboBox")
        self.ResolutionComboBox.setGeometry(QRect(10,20,151,21))
        self.ResolutionComboBox.setInsertionPolicy(QComboBox.AtCurrent)
        self.ResolutionComboBox.insertItem("Resolution: FULL")
        #self.ResolutionComboBox.insertItem("Resolution: HALF")
        #self.ResolutionComboBox.insertItem("Resolution: QUARTER")
        
        self.InterruptionTimerCheckBox = QCheckBox(self.CheckSettingsButtonGroup,"InterruptionTimerCheckBox")
        self.InterruptionTimerCheckBox.setGeometry(QRect(10,50,140,20))
        self.ExternalInhibitCheckBox = QCheckBox(self.CheckSettingsButtonGroup,"ExternalInhibitCheckBox")
        self.ExternalInhibitCheckBox.setGeometry(QRect(10,80,140,20))
        self.DisplayIntervalGroupBox = QGroupBox(self,"DisplayIntervalGroupBox")
        self.DisplayIntervalGroupBox.setGeometry(QRect(330,220,190,50))
        self.DisplayIntervalSpinBox = QSpinBox(self.DisplayIntervalGroupBox,"DisplayIntervalSpinBox")
        self.DisplayIntervalSpinBox.setGeometry(QRect(110,20,50,21))
        self.DisplayIntervalSpinBox.setMaxValue(300)
        self.DisplayIntervalTextLabel = QLabel(self.DisplayIntervalGroupBox,"DisplayIntervalTextLabel")
        self.DisplayIntervalTextLabel.setGeometry(QRect(20,20,80,21))
        self.OperationTypeButtonGroup = QButtonGroup(self,"OperationTypeButtonGroup")
        self.OperationTypeButtonGroup.setGeometry(QRect(10,10,201,50))
        self.TestRadioButton = QRadioButton(self.OperationTypeButtonGroup,"TestRadioButton")
        self.TestRadioButton.setGeometry(QRect(120,20,60,20))
        self.NormalRadioButton = QRadioButton(self.OperationTypeButtonGroup,"NormalRadioButton")
        self.NormalRadioButton.setGeometry(QRect(40,20,70,20))
        self.AcqBankButtonGroup = QButtonGroup(self,"AcqBankButtonGroup")
        self.AcqBankButtonGroup.setGeometry(QRect(10,70,150,50))
        self.AcqBankZeroRadioButton = QRadioButton(self.AcqBankButtonGroup,"AcqBankZeroRadioButton")
        self.AcqBankZeroRadioButton.setGeometry(QRect(20,20,51,21))
        self.AcqBankOneRadioButton = QRadioButton(self.AcqBankButtonGroup,"AcqBankOneRadioButton")
        self.AcqBankOneRadioButton.setGeometry(QRect(90,20,50,21))
        self.OffsetXGroupBox = QGroupBox(self,"OffsetXGroupBox")
        self.OffsetXGroupBox.setGeometry(QRect(230,20,150,40))
        self.OffsetXSpinBox = QSpinBox(self.OffsetXGroupBox,"OffsetXSpinBox")
        self.OffsetXSpinBox.setGeometry(QRect(10,10,50,20))
        self.OffsetXSpinBox.setMaxValue(999)
        
        self.OffsetXTextLabel = QLabel(self.OffsetXGroupBox,"OffsetXTextLabel")
        self.OffsetXTextLabel.setGeometry(QRect(70,10,70,20))
        
        self.StatTimerGroupBox = QGroupBox(self,"StatTimerGroupBox")
        self.StatTimerGroupBox.setEnabled(0)
        self.StatTimerGroupBox.setGeometry(QRect(180,80,200,40))
        self.StatTimerLengthSpinBox = QSpinBox(self.StatTimerGroupBox,"StatTimerLengthSpinBox")
        self.StatTimerLengthSpinBox.setGeometry(QRect(10,10,50,20))
        self.StatTimerLengthSpinBox.setMaxValue(30)
        self.StatTimerLengthSpinBox.setValue(5)
        self.StatTimerLengthTextLabel = QLabel(self.StatTimerGroupBox,"StatTimerLengthTextLabel")
        self.StatTimerLengthTextLabel.setGeometry(QRect(70,10,120,21))
        self.line2 = QFrame(self,"line2")
        self.line2.setGeometry(QRect(30,190,490,20))
        self.line2.setFrameShape(QFrame.HLine)
        self.line2.setFrameShadow(QFrame.Sunken)
        self.line2.setLineWidth(2)
        self.line2.setFrameShape(QFrame.HLine)
        self.ChannelsGroupBox = QGroupBox(self,"ChannelsGroupBox")
        self.ChannelsGroupBox.setGeometry(QRect(330,280,190,70))
        self.ChannelsNumberTextLabel = QLabel(self.ChannelsGroupBox,"ChannelsNumberTextLabel")
        self.ChannelsNumberTextLabel.setGeometry(QRect(10,30,101,21))
        self.ChannelsNumberSpinBox = QSpinBox(self.ChannelsGroupBox,"ChannelsNumberSpinBox")
        self.ChannelsNumberSpinBox.setGeometry(QRect(120,30,40,21))
        self.ChannelsNumberSpinBox.setMaxValue(4)
        self.ChannelsNumberSpinBox.setMinValue(1)
        
        self.FiniteTimeGroupBox = QGroupBox(self,"FiniteTimeGroupBox")
        self.FiniteTimeGroupBox.setGeometry(QRect(30,300,270,50))
        
        self.FiniteTimeSpinBox = QSpinBox(self.FiniteTimeGroupBox,"FiniteTimeSpinBox")
        self.FiniteTimeSpinBox.setGeometry(QRect(100,20,85,21))
        self.FiniteTimeSpinBox.setMaxValue(999999999)
        self.FiniteTimeSpinBox.setLineStep(10)
        
        self.EnableFiniteTimeCheckBox = QCheckBox(self.FiniteTimeGroupBox,"EnableFiniteTimeCheckBox")
        self.EnableFiniteTimeCheckBox.setGeometry(QRect(190,20,60,21))
        self.FinteTimeTextLabel = QLabel(self.FiniteTimeGroupBox,"FinteTimeTextLabel")
        self.FinteTimeTextLabel.setGeometry(QRect(20,20,73,21))
        self.RoiGroupBox = QGroupBox(self,"RoiGroupBox")
        self.RoiGroupBox.setGeometry(QRect(30,220,270,70))
        RoiGroupBox_font = QFont(self.RoiGroupBox.font())
        self.RoiGroupBox.setFont(RoiGroupBox_font)
        self.StartColTextLabel = QLabel(self.RoiGroupBox,"StartColTextLabel")
        self.StartColTextLabel.setGeometry(QRect(10,30,70,20))
        self.EndColTextLabel = QLabel(self.RoiGroupBox,"EndColTextLabel")
        self.EndColTextLabel.setGeometry(QRect(200,30,63,20))
        self.StartColSpinBox = QSpinBox(self.RoiGroupBox,"StartColSpinBox")
        self.StartColSpinBox.setGeometry(QRect(80,30,50,20))
        self.StartColSpinBox.setMaxValue(16383)
        self.StartColSpinBox.setLineStep(128)
        self.EndColSpinBox = QSpinBox(self.RoiGroupBox,"EndColSpinBox")
        self.EndColSpinBox.setGeometry(QRect(140,30,50,20))
        self.EndColSpinBox.setMaxValue(16383)
        self.EndColSpinBox.setLineStep(128)
        self.TimeOutGroupBox = QGroupBox(self,"TimeOutGroupBox")
        self.TimeOutGroupBox.setGeometry(QRect(10,140,170,40))
        self.TimeOutTextLabel = QLabel(self.TimeOutGroupBox,"TimeOutTextLabel")
        self.TimeOutTextLabel.setGeometry(QRect(80,10,80,21))
        self.TimeOutSpinBox = QSpinBox(self.TimeOutGroupBox,"TimeOutSpinBox")
        self.TimeOutSpinBox.setGeometry(QRect(10,10,61,20))
        self.TimeOutSpinBox.setMaxValue(2400)
        self.TimeOutSpinBox.setMinValue(100)
        self.TimeOutSpinBox.setLineStep(50)
        self.SkipGroupBox = QGroupBox(self,"SkipGroupBox")
        self.SkipGroupBox.setGeometry(QRect(420,130,110,50))
        self.SkipCheckBox = QCheckBox(self.SkipGroupBox,"SkipCheckBox")
        self.SkipCheckBox.setGeometry(QRect(10,20,90,20))
        self.BinningGroupBox = QGroupBox(self,"BinningGroupBox")
        self.BinningGroupBox.setGeometry(QRect(220,130,140,50))
        self.BinningCheckBox = QCheckBox(self.BinningGroupBox,"BinningCheckBox")
        self.BinningCheckBox.setGeometry(QRect(30,20,100,20))
        self.line2_2 = QFrame(self,"line2_2")
        self.line2_2.setGeometry(QRect(30,360,490,20))
        self.line2_2.setFrameShape(QFrame.HLine)
        self.line2_2.setFrameShadow(QFrame.Sunken)
        self.line2_2.setLineWidth(2)
        self.line2_2.setFrameShape(QFrame.HLine)
        self.buttonSaveDefaults = QPushButton(self,"buttonSaveDefaults")
        self.buttonSaveDefaults.setGeometry(QRect(390,390,130,26))
        self.buttonSaveDefaults.setAutoDefault(1)
        if( self.readonly == 1):
            self.buttonSaveDefaults.setEnabled( 0 );
        self.buttonSave = QPushButton(self,"buttonSave")
        self.buttonSave.setGeometry(QRect(300,390,82,26))
        self.buttonSave.setAutoDefault(1)
        if( self.readonly == 1):
            self.buttonSave.setEnabled( 0 );
        self.buttonDownload = QPushButton(self,"buttonDownload")
        self.buttonDownload.setGeometry(QRect(120,390,140,26))
        self.buttonDownload.setAutoDefault(1)
        self.buttonDownload.setDefault(1)
        if( self.readonly == 1):
            self.buttonDownload.setEnabled( 0 );
        self.buttonClose = QPushButton(self,"buttonClose")
        self.buttonClose.setGeometry(QRect(30,390,82,26))
        self.buttonClose.setAutoDefault(1)
        self.languageChange()
        self.resize(QSize(562,439).expandedTo(self.minimumSizeHint()))
        self.clearWState(Qt.WState_Polished)
        self.connect(self.buttonSave,SIGNAL("clicked()"),self.Save )
        self.connect(self.buttonSaveDefaults,SIGNAL("clicked()"),self.SaveDefaults )
        self.connect(self.buttonDownload,SIGNAL("clicked()"),self.Download )
        self.connect(self.buttonClose,SIGNAL("clicked()"),self, SLOT("close()") )
        self.connect(self.InterruptionTimerCheckBox,SIGNAL("clicked()"),self.updateDialog)
        
        self.connect(self.ResolutionComboBox,SIGNAL("activated(int)"),self.updateDialog)
        
        self.connect(self.EnableFiniteTimeCheckBox,SIGNAL("clicked()"),self.updateDialog)
        self.connect(self.ChannelsNumberSpinBox,SIGNAL("valueChanged(int)"),self.updateDialog)
        self.connect(self.FiniteTimeSpinBox,SIGNAL("valueChanged(int)"),self.updateDialog)
        self.connect(self.TestRadioButton,SIGNAL("clicked()"),self.updateDialog)
        self.connect(self.NormalRadioButton,SIGNAL("clicked()"),self.updateDialog)
        self.SetTdcSettings(self.cfg.ToTdcSettings() )
        self.SetRunSettings(self.cfg.ToRunSettings() )
        self.updateDialog()
        
    def SetRunSettings(self,set):
        if( set == [] or set is None ): return ;
        if( DBG == 1):
            print "ConfigC111Dialog.SetRunSettings(): ", set
            
        self.StartColSpinBox.setValue( set[self.glob.IDX_START_COL] )
        self.EndColSpinBox.setValue( set[self.glob.IDX_END_COL] )
        self.ChannelsNumberSpinBox.setValue( set[self.glob.IDX_CHANNELS_NUMBER] )
        
        if( set[self.glob.IDX_ENABLE_FINITE_TIME] == 0):
            self.EnableFiniteTimeCheckBox.setChecked(0)
            self.FiniteTimeSpinBox.setEnabled(0)
            self.FiniteTimeSpinBox.setValue(0)
        else:
            self.EnableFiniteTimeCheckBox.setChecked(1)
            self.FiniteTimeSpinBox.setEnabled(1)
            self.FiniteTimeSpinBox.setValue( set[self.glob.IDX_FINITE_TIME_LENGTH] )
            
        self.ChannelsNumberSpinBox.setValue( set[self.glob.IDX_CHANNELS_NUMBER] )
        self.DisplayIntervalSpinBox.setValue(set[self.glob.IDX_DISPLAY_UPDATE_INTERVAL] )
        if( set[self.glob.IDX_BINNING] == 1):
            self.BinningCheckBox.setChecked(1)
        else:
            self.BinningCheckBox.setChecked(0)

    def SetTdcSettings(self,set): 
        if( set == [] or set is None ): return ;
        self.TimeOutSpinBox.setValue(set[self.glob.IDX_TIMEOUT])
        if( set[self.glob.IDX_OPERATION_MODE] == self.glob.GFD ):
            self.OffsetXSpinBox.setEnabled( 1 )
            self.OffsetXSpinBox.setValue( set[self.glob.IDX_OFFSETX] )
            self.SkipCheckBox.setEnabled(0)
        elif( set[self.glob.IDX_OPERATION_MODE] == self.glob.MHIP ):
            self.OffsetXGroupBox.setEnabled(0)
            self.OffsetXSpinBox.setEnabled( 0 )
            self.OffsetXSpinBox.setValue( 0 )
            self.SkipCheckBox.setEnabled(0)
        elif( set[self.glob.IDX_OPERATION_MODE] == self.glob.MHIT ):
            self.OffsetXGroupBox.setEnabled(0)
            self.OffsetXSpinBox.setEnabled( 0 )
            self.OffsetXSpinBox.setValue( 0 )
        else:
            self.OffsetXGroupBox.setEnabled(0)
            self.OffsetXSpinBox.setEnabled( 0 )
            self.OffsetXSpinBox.setValue( 0 )
            self.SkipCheckBox.setEnabled(1)

        if( set[self.glob.IDX_OPERATION_TYPE] == self.glob.TEST):
            self.TestRadioButton.setChecked(1)
        else:
            self.NormalRadioButton.setChecked(1)
        if( set[self.glob.IDX_SKIP] == 1 
            and set[self.glob.IDX_OPERATION_MODE] == self.glob.MHIT ):
            self.SkipCheckBox.setChecked(1)
        else:
            self.SkipCheckBox.setChecked(0)

        if( set[self.glob.IDX_EXT_INHIBIT] == 1 ):
            self.ExternalInhibitCheckBox.setChecked(1)
        else:
            self.ExternalInhibitCheckBox.setChecked(0)
        self.OffsetXSpinBox.setValue( set[self.glob.IDX_OFFSETX] )
        
        if( set[self.glob.IDX_RESOLUTION] == 0):
            self.ResolutionComboBox.setCurrentItem(0)
        elif( set[self.glob.IDX_RESOLUTION] == 1):
            self.ResolutionComboBox.setCurrentItem(1)
        else:
            self.ResolutionComboBox.setCurrentItem(2)

        if( set[self.glob.IDX_INTERRUPT_TIMER] == 1):
            self.InterruptionTimerCheckBox.setChecked(1)
            self.StatTimerGroupBox.setEnabled(1)
            self.StatTimerLengthSpinBox.setValue( set[self.glob.IDX_STATS_TIMER_LENGTH] )
        if( set[self.glob.IDX_ACQU_BANK] == 0):
            self.AcqBankZeroRadioButton.setChecked(1)
        else:
            self.AcqBankOneRadioButton.setChecked(1)

    def updateDialog(self):
        om = self.cfg.GetRealOperationMode( )
        self.TimeOutSpinBox.setMinValue(100)
        if( om == self.glob.GFD ):
            if( self.ResolutionGfdOk == False):
                self.ResolutionComboBox.insertItem("Resolution: HALF")
                self.ResolutionComboBox.insertItem("Resolution: QUARTER")
                self.ResolutionGfdOk = True ;
                
            self.ChannelsNumberSpinBox.setEnabled(0) 
            self.ChannelsNumberSpinBox.setValue(1)
            
            if( self.ResolutionComboBox.currentItem() == 0):
                self.TimeOutSpinBox.setMaxValue( 300 )
                self.EndColSpinBox.setMaxValue( self.glob.GFD_FULL_MAX_VALUE )
            elif( self.ResolutionComboBox.currentItem() == 2):
                self.TimeOutSpinBox.setMaxValue( 1200 )
                self.EndColSpinBox.setMaxValue( self.glob.GFD_QUART_MAX_VALUE )
            else:
                self.EndColSpinBox.setMaxValue( self.glob.GFD_HALF_MAX_VALUE )
                self.TimeOutSpinBox.setMaxValue( 600 )
                
        if ( om == self.glob.MHIT  or  om == self.glob.MHIP ):
            self.ChannelsNumberSpinBox.setEnabled(1) 
            
            self.ResolutionComboBox.setEnabled(0)
            self.EndColSpinBox.setMaxValue( self.glob.MHIT_FULL_MAX_VALUE )
                
        if (self.InterruptionTimerCheckBox.isChecked() == 1):
            self.StatTimerGroupBox.setEnabled(1)
            if( self.StatTimerLengthSpinBox.value() <= 0 ):
                self.StatTimerLengthSpinBox.setValue(3) 
        elif (self.InterruptionTimerCheckBox.isChecked() == 0):
            self.StatTimerGroupBox.setEnabled(0)
            self.StatTimerLengthSpinBox.setValue(0)
        if( self.EnableFiniteTimeCheckBox.isChecked() == 1):
            self.FiniteTimeSpinBox.setEnabled(1)
            self.DisplayIntervalSpinBox.setValue( self.FiniteTimeSpinBox.value() + 1  )
        else:
            self.FiniteTimeSpinBox.setEnabled(0)
            self.FiniteTimeSpinBox.setValue(0)
        if( self.TestRadioButton.isChecked() == 1 ):
            self.OffsetXGroupBox.setEnabled(0)
            self.OffsetXSpinBox.setValue(0)
        if( self.NormalRadioButton.isChecked() == 1 ):
            self.OffsetXGroupBox.setEnabled(1)

            
    def guiToRunSettings(self):
        runset = ["DEVICE", 0 , 0 , 0 , 0 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        runset[self.glob.IDX_ROI] = 1
        runset[self.glob.IDX_START_COL] = self.StartColSpinBox.value()
        runset[self.glob.IDX_END_COL] = self.EndColSpinBox.value()
        if( runset[self.glob.IDX_END_COL] == 0):
            runset[self.glob.IDX_END_COL] = self.EndColSpinBox.maxValue()
        runset[self.glob.IDX_START_ROW] = 0 # self.StartRowSpinBox.value()
        runset[self.glob.IDX_END_ROW] = 0# self.EndRowSpinBox.value()
        runset[self.glob.IDX_CHANNELS_NUMBER] = self.ChannelsNumberSpinBox.value() 
        cn = runset[self.glob.IDX_CHANNELS_NUMBER]
        runset[self.glob.IDX_FIRST_CHAN] = 0
        runset[self.glob.IDX_SECOND_CHAN] = 1
        runset[self.glob.IDX_THIRD_CHAN] = 2
        runset[self.glob.IDX_FOURTH_CHAN] = 3
        ft = self.EnableFiniteTimeCheckBox.isChecked()
        if( ft == 1 ):
            runset[self.glob.IDX_ENABLE_FINITE_TIME] = 1
            runset[self.glob.IDX_FINITE_TIME_LENGTH] = self.FiniteTimeSpinBox.value()
        else:
            runset[self.glob.IDX_ENABLE_FINITE_TIME] = 0
            runset[self.glob.IDX_FINITE_TIME_LENGTH] = 0
        runset[self.glob.IDX_DISPLAY_UPDATE_INTERVAL] = self.DisplayIntervalSpinBox.value()

        if( self.BinningCheckBox.isChecked() == 1):
            runset[self.glob.IDX_BINNING] = 1
        else:
            runset[self.glob.IDX_BINNING] = 0
 
        return runset
        
            
    def guiToTdcSettings(self):
        tdc = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ;
        tdc[self.glob.IDX_TIMEOUT] = self.TimeOutSpinBox.value()
        om = self.cfg.GetRealOperationMode( )
        if( om == self.glob.MHIT ): 
            tdc[self.glob.IDX_OPERATION_MODE] = self.glob.MHIT ;
            if( tdc[self.glob.IDX_TIMEOUT] == 0):
                tdc[self.glob.IDX_TIMEOUT] = self.glob.MHIT_MAX_TIMEOUT ;
        elif( om == self.glob.MHIP ): 
            tdc[self.glob.IDX_OPERATION_MODE] = self.glob.MHIP ;
            if( tdc[self.glob.IDX_TIMEOUT] == 0):
                tdc[self.glob.IDX_TIMEOUT] = self.glob.MHIT_MAX_TIMEOUT ;
        else:
            tdc[self.glob.IDX_OPERATION_MODE] = self.glob.GFD ;
            if( tdc[self.glob.IDX_TIMEOUT] == 0):
                tdc[self.glob.IDX_TIMEOUT] = self.glob.GFD_MAX_TIMEOUT ;
        if( self.TestRadioButton.isChecked() ): 
            tdc[self.glob.IDX_OPERATION_TYPE] = self.glob.TEST ;
        else: 
            tdc[self.glob.IDX_OPERATION_TYPE] = self.glob.NORMAL
        if( self.AcqBankZeroRadioButton.isChecked() ):
            tdc[self.glob.IDX_ACQU_BANK] = 0
        else:
            tdc[self.glob.IDX_ACQU_BANK] = 1
        if( self.ExternalInhibitCheckBox.isChecked() ):
            tdc[self.glob.IDX_EXT_INHIBIT] = 1
        else:
            tdc[self.glob.IDX_EXT_INHIBIT] = 0
        tdc[self.glob.IDX_PILEUPX] = 1
        tdc[self.glob.IDX_OFFSETX] = self.OffsetXSpinBox.value()
        if( (om == self.glob.MHIT)  or (om == self.glob.MHIP) ):
            tdc[self.glob.IDX_PILEUPX] = 0
            tdc[self.glob.IDX_OFFSETX] = 0
        tdc[self.glob.IDX_PILEUPY] = 0
        tdc[self.glob.IDX_OFFSETY] = 0 # self.OffsetYSpinBox.value()
        
        if( self.ResolutionComboBox.currentItem() == 0):
            tdc[self.glob.IDX_RESOLUTION] = 0
        elif( self.ResolutionComboBox.currentItem() == 1):
            tdc[self.glob.IDX_RESOLUTION] = 1
        else:
            tdc[self.glob.IDX_RESOLUTION] = 4
    
        tdc[self.glob.IDX_MONITOR] = self.glob.GATE 
        if( self.InterruptionTimerCheckBox.isChecked()):
            tdc[self.glob.IDX_INTERRUPT_TIMER] = 1
            tdc[self.glob.IDX_STATS_TIMER_LENGTH] = self.StatTimerLengthSpinBox.value()
        else:
            tdc[self.glob.IDX_INTERRUPT_TIMER] = 0
            tdc[self.glob.IDX_STATS_TIMER_LENGTH] = 0
        if( self.SkipCheckBox.isChecked() and 
            tdc[self.glob.IDX_OPERATION_MODE] == self.glob.MHIT):
            tdc[self.glob.IDX_SKIP] = 1
        else:
            tdc[self.glob.IDX_SKIP] = 0
        #print "\n guiToTdcSettings: TDC :", tdc , "\n "
        return( tdc )
        

    def Save(self):
        if ( self.checkBeforeAction() == self.glob.BAD_CONFIG_CHOICE ):
            return    
        self.updateDialog()
        tdc = self.guiToTdcSettings( )
        run = self.guiToRunSettings( )
        self.cfg.FromTdcSettings( tdc )
        self.cfg.FromRunSettings( run )
        #self.cfg.PrintCfg()
        cfg_path = self.cfg.GetCfgDirPath()
        fname = QFileDialog.getSaveFileName(
                    cfg_path,
                    "Config files (*.cfg)", self, "Save config file dialog"
                    "Choose a filename to save under" )
        if fname.isEmpty():
            return
        print "FNAME : " , fname
        d = string.split( str(fname), "/" )
        filename = "" 
        for i in range(len(d) -1):
            filename = filename + d[i] + "\\"
        filename = filename + d[len(d)-1]
        t = string.split( str(filename), ".")
        if( len(t) < 2):
            filename = filename + ".cfg"
        else:
            if ( t[1] != "cfg" and t[1] != "CFG"):
                filename = filename + ".cfg"
        self.cfg.SaveToFile(filename)
        s = "Configuration saved successfully to: \n" + filename + " "
        QMessageBox.information(self,"Information", s)
        
    def SaveDefaults(self):
        if ( self.checkBeforeAction() == self.glob.BAD_CONFIG_CHOICE ):
            return    
        self.updateDialog()
        user = getpass.getuser()
        user_path =  self.glob.CFG_PATH_USER + user + "\\"
        if( os.path.exists(user_path) == False ):
            save_path = self.glob.CFG_PATH_MAIN
        else:
            save_path = user_path
        om = self.cfg.GetRealOperationMode( )
        if( om == self.glob.MHIT ): 
            save_path = save_path + self.glob.CFG_DIR_MHIT
        elif( om == self.glob.MHIP ): 
            save_path = save_path + self.glob.CFG_DIR_MHIP
        else:
            save_path = save_path + self.glob.CFG_DIR_GFD1D

        filename = "DefaultSettings.cfg" 
        print "DaveDefaults: ", save_path , ":  " , filename
        fname = save_path + filename
        self.cfg.SaveToFile(fname)
        s = "Configuration saved successfully to: \n" + fname + " "
        QMessageBox.information(self,"Information", s)

    def checkBeforeAction(self):
        return( self.glob.CONFIG_CHECK_OK )
                    
    def Download(self):
        
        if ( self.checkBeforeAction() == self.glob.BAD_CONFIG_CHOICE ):
            return
        self.updateDialog()
        tdc = self.guiToTdcSettings( )
        run = self.guiToRunSettings( )
        self.cfg.FromTdcSettings( tdc )
        self.cfg.FromRunSettings( run )
        self.cfg.DownloadToTdc( )
        s = "Configuration downloaded successfully to TDC : \n" 
        QMessageBox.information(self,"Information", s)


    def languageChange(self):
        self.setCaption(self.__tr("Configuration Dialog"))
        self.setCaption( self.cfg.GetName() )
        self.CheckSettingsButtonGroup.setTitle(self.__tr("Check settings"))
        #self.FullResolutionCheckBox.setText(self.__tr("Enable Full Resolution   "))
        self.InterruptionTimerCheckBox.setText(self.__tr("Enable Statistics Timer"))
        self.ExternalInhibitCheckBox.setText(self.__tr("Enable External Inhibit  "))
        self.DisplayIntervalGroupBox.setTitle(self.__tr("Display Update interval"))
        self.DisplayIntervalTextLabel.setText(self.__tr("Length in sec : "))
        self.OperationTypeButtonGroup.setTitle(self.__tr("Operation Type"))
        self.TestRadioButton.setText(self.__tr("Test"))
        self.NormalRadioButton.setText(self.__tr("Normal"))
        self.AcqBankButtonGroup.setTitle(self.__tr("Acquisition Bank "))
        self.AcqBankZeroRadioButton.setText(self.__tr("Zero "))
        self.AcqBankOneRadioButton.setText(self.__tr("One"))
        self.OffsetXGroupBox.setTitle(QString.null)
        self.OffsetXTextLabel.setText(self.__tr("Offset X (ns)"))
        self.StatTimerGroupBox.setTitle(QString.null)
        self.StatTimerLengthTextLabel.setText(self.__tr("Statistic timer length (s)"))
        self.ChannelsGroupBox.setTitle(self.__tr("Channels selection "))
        self.ChannelsNumberTextLabel.setText(self.__tr("Number of channels:"))
        self.FiniteTimeGroupBox.setTitle(self.__tr("Acquisition with Finite Time"))
        self.EnableFiniteTimeCheckBox.setText(self.__tr("Enable "))
        self.FinteTimeTextLabel.setText(self.__tr("Length in sec : "))
        self.RoiGroupBox.setTitle(self.__tr("P/C111 Memory Area"))
        self.StartColTextLabel.setText(self.__tr("Start Column  "))
        self.EndColTextLabel.setText(self.__tr("End Column  "))
        self.TimeOutGroupBox.setTitle(QString.null)
        self.TimeOutTextLabel.setText(self.__tr("Time Out  (ns)"))
        self.SkipGroupBox.setTitle(self.__tr("Skip"))
        self.SkipCheckBox.setText(self.__tr("Enable Skip"))
        self.BinningGroupBox.setTitle(self.__tr("Binning"))
        self.BinningCheckBox.setText(self.__tr("Enable Binning"))
        self.buttonSaveDefaults.setText(self.__tr("Save as default"))
        self.buttonSaveDefaults.setAccel(QString.null)
        self.buttonSave.setText(self.__tr("&Save"))
        self.buttonSave.setAccel(self.__tr("Alt+S"))
        self.buttonDownload.setText(self.__tr("&Apply "))
        self.buttonDownload.setAccel(self.__tr("Alt+A"))
        self.buttonClose.setText(self.__tr("&Close"))
        self.buttonClose.setAccel(self.__tr("Alt+C"))


    def __tr(self,s,c = None):
        return qApp.translate("NewDialog",s,c)