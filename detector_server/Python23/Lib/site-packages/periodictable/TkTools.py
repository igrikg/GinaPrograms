import Tkinter as Tk

def build_menubar(parent,menubardesc):
    """
      Create a menubar on parent with options
      described in menubardesc
    """
    mbar = Tk.Frame(parent,relief='raised',bd=1)
    for menudesc in menubardesc:
         build_menu(mbar,menudesc)
    return mbar
        

def build_menu(parent,menudesc):
    cmds = {'COMMAND'  :
               ['add_command',  'label=item[1],underline=0,command=item[2]'],
            'CASCADE'  :
               ['add_cascade',  'item[2](menu)'],
            'SEPARATOR':['add_separator','']}

    button = Tk.Menubutton(parent, text = menudesc[0], underline = 0)
    menu   = Tk.Menu(button, tearoff = 0)

    if menudesc[1]:
        menu.configure(postcommand=menudesc[1])
    button['menu'] = menu

    for item in menudesc[2:]:
         exec('menu.%s(%s)' % (cmds[item[0]][0],cmds[item[0]][1]))
    button.pack(side='left')

def option_setdefault(widget,classname, options):
    """Checks environment variable XAPPLRESDIR for file with name 'classname'
and reads it in option database. If not found try reading in local
directory.

   'options' is a list of options to set as default. It is a list of two-element
pairs [opt-name,opt-value]
"""
    import os, os.path

    try:
       for dir in os.environ['XAPPLRESDIR'].split(':'): 
          resfile = os.path.join(dir,classname)
          if os.path.exists(resfile):
              widget.option_readfile(resfile)
              break
       else:
          widget.option_readfile(classname)
    except: 
       pass

    pfunc = lambda option,value, \
              this=widget: this.option_add(option,value,'widgetDefault')
    [pfunc(option,value) for option,value in options]

def shiftkw(self,kw,kwlist):
    for kwd in kwlist:
        if kwd in kw.keys():
            exec("self.%s = kw[\"%s\"]" % (kwd,kwd))
        else: 
            exec("self.%s = None" % (kwd,))
    retkw = {}
    for key in kw.keys():
          if key not in  kwlist:
              retkw[key] = kw[key]
    return retkw

class SelectButton(Tk.Button):
    def __init__(self,master,cnf={},**kw):
        cnf = Tk._cnfmerge((cnf,kw))
        Tk.Button.__init__(self,master,cnf)        
        self['command'] = self.toggle 
        self.selected = 0
 
    def toggle(self):
        if self.selected: 
           self.selected = 0
           self.configure(relief='raised')
        else:
           self.selected = 1
           self.configure(relief='sunken')

def test1():
   print "test1 called"
def test2():
   print "test1 called"
def testversion():
   print "Version is 2.3"

if __name__ == '__main__':
     menudesc1 = [ "File",None,
                   ["COMMAND","Test1",test1],
                   ["COMMAND","Test2",test2] ]
     menudesc2 = [ "Help", None,
                   ["COMMAND","Version",testversion] ]

     mbardesc = [menudesc1,menudesc2]

     root = Tk.Tk()
     mbar = build_menubar(root,mbardesc)
     mbar.pack(fill='x',expand='no')
     root.mainloop()

