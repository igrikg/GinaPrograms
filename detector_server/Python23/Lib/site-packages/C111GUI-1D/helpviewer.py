#!/usr/bin/env python

import sys, string
from qt import *
from os import *

TRUE  = 1
FALSE = 0

back = [
'16 16 5 1',
'# c #000000',
'a c #ffffff',
'c c #808080',
'b c #c0c0c0',
'. c None',
'................',
'.......#........',
'......##........',
'.....#a#........',
'....#aa########.',
'...#aabaaaaaaa#.',
'..#aabbbbbbbbb#.',
'...#abbbbbbbbb#.',
'...c#ab########.',
'....c#a#ccccccc.',
'.....c##c.......',
'......c#c.......',
'.......cc.......',
'........c.......',
'................',
'......................']

forward = [
'16 16 5 1',
'# c #000000',
'a c #ffffff',
'c c #808080',
'b c #c0c0c0',
'. c None',
'................',
'................',
'.........#......',
'.........##.....',
'.........#a#....',
'..########aa#...',
'..#aaaaaaabaa#..',
'..#bbbbbbbbbaa#.',
'..#bbbbbbbbba#..',
'..########ba#c..',
'..ccccccc#a#c...',
'........c##c....',
'........c#c.....',
'........cc......',
'........c.......',
'................',
'................']

homes = [
'16 16 4 1',
'# c #000000',
'a c #ffffff',
'b c #c0c0c0',
'. c None',
'........... ....',
'   ....##.......',
'..#...####......',
'..#..#aabb#.....',
'..#.#aaaabb#....',
'..##aaaaaabb#...',
'..#aaaaaaaabb#..',
'.#aaaaaaaaabbb#.',
'###aaaaaaaabb###',
'..#aaaaaaaabb#..',
'..#aaa###aabb#..',
'..#aaa#.#aabb#..',
'..#aaa#.#aabb#..',
'..#aaa#.#aabb#..',
'..#aaa#.#aabb#..',
'..#####.######..',
'................']

docprint = [
    '16 14 6 1',
    '. c #000000',
    '# c #848284',
    'a c #c6c3c6',
    'b c #ffff00',
    'c c #ffffff',
    'd c None',
    'ddddd.........dd',
    'dddd.cccccccc.dd',
    'dddd.c.....c.ddd',
    'ddd.cccccccc.ddd',
    'ddd.c.....c....d',
    'dd.cccccccc.a.a.',
    'd..........a.a..',
    '.aaaaaaaaaa.a.a.',
    '.............aa.',
    '.aaaaaa###aa.a.d',
    '.aaaaaabbbaa...d',
    '.............a.d',
    'd.aaaaaaaaa.a.dd',
    'dd...........ddd'
]

class HelpWindow(QMainWindow):
    def __init__(self,home_,_path,parent=None,name=None):
        QMainWindow.__init__(self,parent,name,Qt.WDestructiveClose)
        self.printerName = ""
        self.pathCombo = 0
        
        self.browser = QTextBrowser(self)

        self.browser.mimeSourceFactory().setFilePath(_path)
        self.browser.setFrameStyle(QFrame.Panel|QFrame.Sunken)
        c = QColor( "black" )
        self.browser.setPaletteForegroundColor( c )
        self.connect(self.browser,SIGNAL('sourceChanged(const QString&)'),self.slotSourceChanged)

        self.setCentralWidget(self.browser)

        if home_ != '':
            self.browser.setSource(home_)

        self.connect(self.browser,
		SIGNAL('highlighted(const QString&)'),
		self.statusBar(),
		SLOT('message(const QString&)'))

        self.resize(640,700)

        backIcon = QIconSet(QPixmap(back))
        forwardIcon = QIconSet(QPixmap(forward))
        homeIcon = QIconSet(QPixmap(homes))
        printIcon = QIconSet(QPixmap(docprint))
        
        toolbar = QToolBar(self)

        button = QToolButton(backIcon,'Backward','',self.browser,SLOT('backward()'),toolbar)
        self.connect(self.browser,SIGNAL('backwardAvailable(bool)'),button,SLOT('setEnabled(bool)'))
        button.setEnabled(FALSE)
        button = QToolButton(forwardIcon,'Forward','',self.browser,SLOT('forward()'),toolbar)
        self.connect(self.browser,SIGNAL('forwardAvailable(bool)'),button,SLOT('setEnabled(bool)'))
        button.setEnabled(FALSE)
        button = QToolButton(homeIcon,'Home','',self.browser,SLOT('home()'),toolbar)
        self.filePrint = QToolButton(printIcon,'Print File',QString.null,self.printDoc,toolbar,'print file')
       
        toolbar.addSeparator()

        self.pathCombo = QComboBox(TRUE,toolbar)
        self.connect(self.pathCombo,SIGNAL('activated(const QString&)'),self.slotPathSelected)
        toolbar.setStretchableWidget(self.pathCombo)
        self.setRightJustification(TRUE)
        #self.setDockEnabled(Qt.DockLeft,FALSE)
       # self.setDockEnabled(Qt.DockRight,FALSE)
        #self.setDockEnabled(Qt.DockBottom,FALSE)
        #self.setDockEnabled(Qt.DockTop,FALSE)

        self.pathCombo.insertItem(home_)
        self.browser.setFocus()

    def printDoc(self):
        #print "Not implemented yet !!"
        printer = QPrinter()
        if( self.printerName != ""):
            printer.setPrinterName(self.printerName)
        printer.setFullPage(TRUE)
        if printer.setup(self):
            self.emit(PYSIGNAL( "message"),(QString("Printing..."),5000 ))
            p = QPainter(printer)
            metrics = QPaintDeviceMetrics(p.device())
            dpix = metrics.logicalDpiX()
            dpiy = metrics.logicalDpiY()
            margin = 72
            body = QRect(margin*dpix/72,
                                            margin*dpiy/72,
                                            metrics.width()-margin*dpix/72*2,
                                            metrics.height()-margin*dpiy/72*2)
            richText = QSimpleRichText(self.browser.text(),QFont(),
                                                                    self.browser.context(),
                                                                    self.browser.styleSheet(),
                                                                    self.browser.mimeSourceFactory(),body.height())
            richText.setWidth(p,body.width())
            view = QRect(body)
            page = 1
            while TRUE:
                richText.draw(p,body.left(),body.top(),view,self.colorGroup())
                view.moveBy(0,body.height())
                p.translate(0,-body.height())
                p.drawText(view.right()-p.fontMetrics().width(str(page)),
                                        view.bottom()+p.fontMetrics().ascent()+5,str(page))
                if view.top() >= richText.height():
                    break
                printer.newPage()
                page = page + 1
            pname=printer.printerName()
            
            if( self.printerName == "" ):
                self.printerName = pname 
            #print "PRINTER END:",  pname , "SELF:", self.printerName   
            p.end()
            
            self.emit(PYSIGNAL( "message"),(QString("Printing completed"),5000 ))
        
    def setBackwardAvailable(self,b):
        self.menuBar().setItemEnabled(self.backwardId,b)

    def setForwardAvailable(self,b):
        self.menuBar().setItemEnabled(self.forwardId,b)

    def slotSourceChanged(self,url):
        #if self.browser.documentTitle().isNull():
        self.setCaption('Padi - Helpviewer')
        #else:
        #    self.setCaption('PyQt - Example - Helpviewer - ' + str(self.browser.documentTitle()))

        if not url.isEmpty()and self.pathCombo:
            exists = FALSE
            for i in range(self.pathCombo.count()):
                if str(self.pathCombo.text(i)) == str(url):
                    exists = TRUE
                    break
            if exists == FALSE:
                self.pathCombo.insertItem(url,0)
                self.pathCombo.setCurrentItem(0)
            else:
                self.pathCombo.setCurrentItem(i)

    def slotPathSelected(self,_path):
        _path = str(_path)
        self.browser.setSource(_path)