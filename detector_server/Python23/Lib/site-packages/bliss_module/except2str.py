#!/usr/bin/env python
##########################################################################
# File:         except2str.py
# $Header: /segfs/bliss/source/python/utils/RCS/except2str.py,v 1.0 2002/11/26 10:18:47 ahoms Rel $
# Project:      Bliss Python modules
# Desc:         Transform exceptions and tracebacks in strings
# Author(s):    A. Homs (ahoms@esrf.fr)
#
# $Log: except2str.py,v $
# Revision 1.0  2002/11/26 10:18:47  ahoms
# Initial release
#
##########################################################################

import sys, string

def get_except_str(obj=None, action=None, exc_info=None):

	exc_0, exc_1, exc_2 = exc_info or sys.exc_info()
	
	prefix = (obj and ('%s: ' % obj)) or ''
	actionstr = (action and (' %s' % action)) or ''

	file_line = ''
	if exc_2:
		tb_obj = exc_2
		while tb_obj.tb_next:
			tb_obj = tb_obj.tb_next
		lineno = tb_obj.tb_lineno
                code = tb_obj.tb_frame.f_code
                fname = code.co_filename
		fname = string.split(fname, '/')[-1]
		file_line = ' (%s:%s)' % (fname, lineno)

	error = ''
	if type(exc_0) == type('string'):
		desc = exc_0
		if exc_1 is None:
			file_line = ''
		else:
			desc += ': %s' % exc_1
	else:	
		try:    error = exc_0.__name__
                except: pass

		desc = '%s' % exc_1

	error = error or 'Error'
	if actionstr or (string.find(desc, error) == -1):
		prefix += '%s%s%s: ' % (error, actionstr, file_line)

	return prefix + desc


def reraise_except_str(obj=None, action=None, exc_info=None):
	raise get_except_str(obj, action, exc_info), None, sys.exc_info()[2]


def get_traceback_str(tb_obj):
	text = []
	while tb_obj:
		lineno = tb_obj.tb_lineno
		code = tb_obj.tb_frame.f_code
		function = code.co_name or '(?)'
		fname = code.co_filename
		if fname != '<stdin>':
			f = open(fname)
			line = f.readlines()[lineno - 1]
			line = string.join(string.split(line))
			f.close()
			str = '%s[%d]: in function %s\n\t%s' % \
			      (fname, lineno, function, line)
		else:
			str = '%s[%d]: function %s' % \
			      (fname, lineno, function)

		text.append(str + '\n\n')
		tb_obj = tb_obj.tb_next

	return text


def test_function():
	try:
		obj = 'OtherObject'
		action = 'doing some important operation'
		a = 'pepe'
		b = string.atoi(a)
	except:
		reraise_except_str(obj, action)	


if __name__ == '__main__':

	print "\nTesting get_except_str ..."

	try:
		obj = 'MyObject'
		action = 'Reading from file'
		f = open('myveryparticular.file')
	except:
		print get_except_str(obj, action)

	print "\nTesting reraise_except_str ..."

	try:
		test_function()
	except:
		tb_obj = sys.exc_info()[2]
		print get_except_str(None, 'calling test_function')

		print "\nTesting get_traceback_str ..."
		str = ''
		for line in get_traceback_str(tb_obj):
			str = str + line
		print str
