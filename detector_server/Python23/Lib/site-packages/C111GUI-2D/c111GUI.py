#! /usr/bin/env python

#/*+*****************************************************************************
#
# File       : C111QT_GUI.PY (Python GUI of the c111 cub card)
# Project    : Solaris Device Driver for CUB+C111 Compact-PCI board
# Description: python GUI for the c111 cub card.
#              The GUI uses the C functions library by the python module c111.py
# 
# Author(s)  : I.I.Zeffirini
# Original   : May 2003
#
# $Revision: $ 
# $Log: $
#
# Copyright (c) 2003 by European Synchrotron Radiation Facility,
#                       Grenoble, France
#
#****************************************************************************-*/

#---------------------------------------------------------------------------
#			C111 header file
#---------------------------------------------------------------------------
#import c111
import sys, os, string, array
import getpass, os.path, shutil
import gc
import ConfigParser
from c111cfg import C111Cfg
from c111globals import C111Globals
from ConfigC111 import ConfigC111Dialog
from remoteparamsimpl import RemoteParamsImpl
from C111GUI_HeaderFile import *

#---------------------------------------------------------------------------
#			GUI module
#---------------------------------------------------------------------------
from C111GUI_SignalHandler import *

# BOOLEAN
# -------
TRUE=1
FALSE=0

DBG=FALSE
#DBG=TRUE
# INSTANTATION
# ------------
#c111 = c111.c111()

# ICON:
# -----
fileprint = [
    '16 14 6 1',
    '. c #000000',
    '# c #848284',
    'a c #c6c3c6',
    'b c #ffff00',
    'c c #ffffff',
    'd c None',
    'ddddd.........dd',
    'dddd.cccccccc.dd',
    'dddd.c.....c.ddd',
    'ddd.cccccccc.ddd',
    'ddd.c.....c....d',
    'dd.cccccccc.a.a.',
    'd..........a.a..',
    '.aaaaaaaaaa.a.a.',
    '.............aa.',
    '.aaaaaa###aa.a.d',
    '.aaaaaabbbaa...d',
    '.............a.d',
    'd.aaaaaaaaa.a.dd',
    'dd...........ddd'
]

class C111GUI_globals:
    def __init__(self,*args):
        self.user = "" 
        self.LastCfg = 0 ; self.CurrentCfg = 0 ; self.DefaultCfg = 0 ;
        self.LoadedCfg = 0 ; self.NewCfg = 0 ;
        self.list_devices = []
        self.container = ""
        self.splitter = "" 
        self.data_2D = "" 
        self.view = "" 
        self.graph = "" 
        self.FD = -1
        self.START_TDC = -1
        self.mode_GFD1D = -1
        self.mode_GFD2D = -1
        self.dict_dialgs = {}
        self.START_TDC_parameters = 0 # Initialise the START TDC parameters
                                                         # 0, parameters not recorded
                                                         # 1, parameters recorded
            
        self.rdh = []
        self.AcquisitionDATA  = -1 # This value will permit to know if at least
                                               # one acquisition has been done
                                                # -1, no acquisition recorded
                                                #  1, at least one acquisition recorded
        self.new_DeviceFilename = "" 
        self.new_ImageFilename = "" 
        self.array_buf_1_Bank0 = ""
        self.array_buf_1_Bank1 = "" 
        self.array_buf_1 = ""
        self.array_buf_2_Bank0 = ""
        self.array_buf_2_Bank1 = ""
        self.array_buf_2 = ""
        self.array_buf_3_Bank0 = ""
        self.array_buf_3_Bank1 = ""
        self.array_buf_3 = ""
        self.array_buf_4_Bank0 = ""
        self.array_buf_4_Bank1 = ""
        self.array_buf_4 = ""
        self.Dim_Image = -1
        self.Graph_title = ""
        self.Graph_xlabel = ""
        self.Graph_ylabel = ""
        self.c111 = ""
        self.cfg_path = ""
        self.readHardMenuItemID = -1
        self.hwMemReadMeasure = QTime()
        self.hwMemDisplMeasure =  QTime()
        self.loopCount = 0
        self.statsActive = 0
        self.finiteAcqTimeOn = 0
        
        

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# BEGINNING OF THE CLASS C111GUI_File Descriptor
class C111GUI_FileDescriptor(QDialog):    
# Constructor
# ~~~~~~~~~~~
    def __init__(self,*args): 
        apply(QDialog.__init__,(self,) + args)
	self.resize(400,150)
        self.setCaption("OPEN DEVICE ")
	self.SetUpFileDescriptorWindow()

    def SetUpFileDescriptorWindow(self):
        global varg
        
	FileDescriptorLayout = QGridLayout(self,2,2,11,6,"FileDescriptorLayout")
	self.ExistingDevicesLabel = QLabel(self,"ExistingDevicesLabel",0)
        self.ExistingDevicesLabel.setText(self.trUtf8("Existing Devices"))
        FileDescriptorLayout.addWidget(self.ExistingDevicesLabel,0,0)

	self.ExistingDevicesStringList = QStringList()
	self.ExistingDevicesComboBox = QComboBox(self,"ExistingDevicesComboBox")
        for i in range(len(varg.list_devices)-1):
		self.ExistingDevicesComboBox.insertItem(str(varg.list_devices[i+1]),-1)
        
	FileDescriptorLayout.addWidget(self.ExistingDevicesComboBox,0,1)
        HBoxLayout_1 = QHBoxLayout(None,0,6,"Layout1")

        self.buttonHelp = QPushButton(self,"buttonHelp")
        self.buttonHelp.setText(self.trUtf8("Help"))
        HBoxLayout_1.addWidget(self.buttonHelp)
        
	spacer = QSpacerItem(20,0,QSizePolicy.Expanding,QSizePolicy.Minimum)
        HBoxLayout_1.addItem(spacer)

        self.buttonDefault = QPushButton(self,"buttonDefault")
        self.buttonDefault.setText(self.trUtf8("Default"))
        self.buttonDefault.setDefault(1)
        HBoxLayout_1.addWidget(self.buttonDefault)

        FileDescriptorLayout.addMultiCellLayout(HBoxLayout_1,1,1,0,1)

################################ 
# Definition of the connection #
################################
#        self.connect(self.buttonChangeDefault,SIGNAL("clicked()"),self.ChangeDefault_fc)
        self.connect(self.buttonDefault,SIGNAL("clicked()"),self.Default_fc)
	self.connect(self.buttonHelp,SIGNAL("clicked()"),self.help_fc)

######################################### 
# Definition of the functions connected #
#########################################
    def help_fc(self):
	QMessageBox.information(self,"Information",self.trUtf8("Choose the corresponding file to open the device for a specified card \n \t \t ortherwise choose Default "))

    def Default_fc(self):
        global varg
        global constg
        
	tp_DeviceFilename = 0
	DeviceFilename = str(self.ExistingDevicesComboBox.currentText())
	ind_DeviceFilename = string.split(DeviceFilename,' ')
	long_ind_DeviceFilename = len(ind_DeviceFilename)
	nb_filename = 0
	for i in range(long_ind_DeviceFilename):
            if (ind_DeviceFilename[i] != ''):
                nb_filename += 1
            else:
		pass
	if (nb_filename != 1):
		QMessageBox.warning(self,"Warning",self.trUtf8("Device File name input argument hasn't been correctly set"))
		return self
	for i in range( long_ind_DeviceFilename ):
            if (ind_DeviceFilename[i] == ''):
                tp_DeviceFilename += 1
            else:
		#global new_DeviceFilename
	 	varg.new_DeviceFilename = ind_DeviceFilename[i]	
	if (tp_DeviceFilename == long_ind_DeviceFilename ):
           	QMessageBox.warning(self,"Warning",self.trUtf8("Device File name input argument hasn't been correctly set"))
                return self

        # Get the File descriptor number
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	#global FD
	bc = -1
	varg.FD = varg.c111.open(varg.new_DeviceFilename)
	if( DBG == TRUE):
            varg.c111.setLibDebug(1)
            varg.c111.setDriverDebug(varg.FD,4)
        else:
            varg.c111.setLibDebug(0)
            varg.c111.setDriverDebug(varg.FD,0)
            #varg.c111.stopTdc(varg.FD)
        try:
            bc = varg.c111.getBootConfig(varg.FD)
            if( DBG == TRUE):
                print "C111GUI_FileDescriptor: Boot_config:", bc
        except:
            pass
        
	if ((bc != 0) and (bc != 1)):
            pb = QProgressDialog( "Downloading Virtex, please wait ....", "In progress ....", 10 )
            pb.setProgress(3)
            #pb = QProgressBar( 10 )
            pb.show()
            if( sys.platform == "win32"):
                varg.c111.loadVirtex(varg.FD,0,"C:\Program Files\C111TST")
            else:
                varg.c111.loadVirtex(varg.FD,0,"/users/iorini/C111_7/src")
            bc = varg.c111.getBootConfig(varg.FD)
            pb.close(TRUE)
	else:
		pass
	self.accept()
	self.close()
	
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# END OF THE CLASS C111GUI_File Descriptor


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# BEGINNING OF THE CLASS MyView
################################

class MyView(C111ExtendedImageView):
#class MyView(PyDVT.ExtendedImageView):
#class MyView(QSplitter):
# Constructor
# ~~~~~~~~~~~
    def __init__(self, *args):
	apply(C111ExtendedImageView.__init__,(self,) + args)
	#apply(ExtendedImageView.__init__,(self,) , { "SelectionCallback":1, })
	
	
# Destructor
# ~~~~~~~~~~
    def __del__(self, *args):
	pass
	
    def EventSelection(self,source):    
	global varg
	
	sel=source.GetDataSelection()
	if sel==None:
		return
	if ( DBG == TRUE):
	    print "\n Event : ", source.GetType() , "\n"
	et = source.GetType( )
	if (et=="Rect"):
            if (hasattr(self,"Dialog3d")==0) or self.Dialog3d.IsVisible()==0:
                    self.Dialog3d=MeshView(None)
                    self.Dialog3d.SetSize(600,400)
                    self.Dialog3d.Show()
                    self.Dialog3d.setFocus()
            self.Dialog3d.SetSource(MeshFilter(None,sel)) 
            self.Dialog3d.Show()
	else:
	    varg.graph.Show()
	    varg.graph.SetSource(GraphView.GraphFilter("",sel,pen=Pen((255,0,0),0,"solid")))
        
        varg.view.Update()
        return

    def focusInEvent (self,e):
	self.GetDrawable().setFocus()
	varg.view.Update()

#%%%%%%%%%%%%%%%%%%%%%%%%
# END OF THE CLASS MyView

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# BEGINNING OF THE CLASS C111GUI_Menu
class C111GUI_Menu(QMainWindow):
# Constructor
# ~~~~~~~~~~~
    def __init__(self, *args):
        
	apply(QMainWindow.__init__,(self,) + args)
	
	# Call of the C111GUI_File Descriptor class in order to get the file descriptor
	self.setfiledescriptor()
	
	self.setCaption(" P/C111 GUI --- ESRF / CS / DEG ")
	self.printer = QPrinter()
		
	self.statusBar().message('Loading Application',2000)
	self.statusBar().setSizeGripEnabled(1)	
	
	self.SetUpMenuWindow()
	self.setUpMainWindow()
	
	self.setMinimumSize(QSize(800,600))
	self.Update_window()
	self.modeTimer = QTimer(self,"modeTimer")
        self.connect(self.modeTimer,SIGNAL("timeout()"),self.updProgressBar)
        self.progressBar = QProgressDialog( "Downloading Virtex, please wait ....", "In progress ....", 30 )

# Call of the file descriptor window dialog:
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def ToolsAutoTune2D(self):
        global varg
        global constg
        
        if( varg.statsActive == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("Auto-tune not allowed while statistics display is running! "))
            return
            
        if( varg.AcquisitionDATA == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("Auto-tune not allowed while image acquisition is running! "))
            return
            
        #pid = os.spawnl( os.P_NOWAIT, 'C:\\VXIPNP\\c111magic\\c111magic.exe' )
        if( varg.FD != -1):
        	varg.c111.close(varg.FD)
		varg.FD = -1
        if( sys.platform == "win32"):
            pid = os.spawnl( os.P_WAIT, 'C:\\Program Files\\C111TST\\c111magic.exe' )
        else:
            pid = os.spawnl( os.P_WAIT, 'c111magic' )
        
        varg.FD = varg.c111.reopen(varg.new_DeviceFilename)
        if( DBG == TRUE):
            varg.c111.setLibDebug(1)
            varg.c111.setDriverDebug(varg.FD,4)
        else:
            varg.c111.setLibDebug(0)
            varg.c111.setDriverDebug(varg.FD,0)
            varg.c111.stopTdc(varg.FD)
        try:
            bc = varg.c111.getBootConfig(varg.FD)
            if( DBG == TRUE):
                print "C111GUI_FileDescriptor: Boot_config:", bc
        except:
            pass
            
        self.STOPTDC_fc()
        hwtdc = varg.c111.getTdcConfigHw( varg.FD )
        #print "HW Config: ", hwtdc
        run = varg.CurrentCfg.ToRunSettings()

        endcol = 2 * ( (int)( hwtdc[constg.IDX_TIMEOUT] / 0.150 ) )
        if( DBG == 1):
            print "T-out :", hwtdc[constg.IDX_TIMEOUT] , " endcol: ", endcol
            
        if( hwtdc[constg.IDX_RESOLUTION] == 1):
            endcol = endcol/2
        if (run[constg.IDX_BINNING] == 1):
            endcol = endcol/2
        while ( ( endcol % 128 ) != 0 ):
            endcol += 1
         
        run[constg.IDX_BINNING] = 1   
        run[constg.IDX_END_COL] = endcol
        run[constg.IDX_END_ROW] = endcol
        
        hardCfg = C111Cfg("Harware Settings")
        hardCfg.SetTdcHandle( varg.FD )
        hardCfg.SetCfgDirPath( varg.cfg_path )
        hardCfg.FromTdcSettings( hwtdc )
        hardCfg.FromRunSettings( run )
        d = ConfigC111Dialog( self , hardCfg )
        d.show()
        d.exec_loop()
        cfg_state = hardCfg.GetState()
        if( (cfg_state == constg.CFG_DOWNLOADED) or
            (cfg_state == constg.CFG_DOWNLOADED_SAVED) or
            (cfg_state == constg.CFG_SAVED_DOWNLOADED)  ):
            c = varg.CurrentCfg.ToSettings()
            s = hardCfg.ToSettings()
            varg.CurrentCfg.FromSettings( s ) 
            varg.LastCfg.FromSettings( c )
            #varg.DefaultCfg.SetCfgDirPath( varg.cfg_path )
            f = varg.cfg_path + "DefaultSettings.cfg"
            varg.DefaultCfg.FromFile( f )   
            self.Setting.setItemEnabled(self.readHardMenuItemID, TRUE);

        self.ToolsDevManage()
        self.setUpMainWindow()
        self.Update_window() 
        
        return
        
    def MemoryTest(self):
        global varg
        global constg
        
        if( varg.statsActive == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("Memory test not allowed while statistics display is running! "))
            return
            
        if( varg.AcquisitionDATA == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("Memory test not allowed while image acquisition is running! "))
            return
            
        #pid = os.spawnl( os.P_NOWAIT, 'C:\\VXIPNP\\c111magic\\c111magic.exe' )
        if( varg.FD != -1):
            varg.c111.close(varg.FD)
        varg.FD = -1
        if( sys.platform == "win32"):
            pid = os.spawnl( os.P_WAIT, 'C:\\Program Files\\C111TST\\c111tst.exe' , ' -mv ')
        else:
            pid = os.spawnl( os.P_WAIT, 'c111tst' , ' -mv ' )
        
        varg.FD = varg.c111.reopen(varg.new_DeviceFilename)
        if( DBG == TRUE):
            varg.c111.setLibDebug(1)
            varg.c111.setDriverDebug(varg.FD,4)
        else:
            varg.c111.setLibDebug(0)
            varg.c111.setDriverDebug(varg.FD,0)
            varg.c111.stopTdc(varg.FD)
        try:
            bc = varg.c111.getBootConfig(varg.FD)
            if( DBG == TRUE):
                print "C111GUI_FileDescriptor: Boot_config:", bc
        except:
            pass
            
        self.STOPTDC_fc()
        self.setUpMainWindow()
        self.Update_window() 
        
        return
        
    def BasicTest(self):
        global varg
        global constg
        
        if( varg.statsActive == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("The basic test not allowed while statistics display is running! "))
            return
            
        if( varg.AcquisitionDATA == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("The basic test not allowed while image acquisition is running! "))
            return
            
        #pid = os.spawnl( os.P_NOWAIT, 'C:\\VXIPNP\\c111magic\\c111magic.exe' )
        if( varg.FD != -1):
            varg.c111.close(varg.FD)
        varg.FD = -1
        if( sys.platform == "win32"):
            pid = os.spawnl( os.P_WAIT, 'C:\\Program Files\\C111TST\\c111tst.exe' , ' -iv ')
        else:
            pid = os.spawnl( os.P_WAIT, 'c111tst' , ' -iv ' )
        
        varg.FD = varg.c111.reopen(varg.new_DeviceFilename)
        if( DBG == TRUE):
            varg.c111.setLibDebug(1)
            varg.c111.setDriverDebug(varg.FD,4)
        else:
            varg.c111.setLibDebug(0)
            varg.c111.setDriverDebug(varg.FD,0)
            varg.c111.stopTdc(varg.FD)
        try:
            bc = varg.c111.getBootConfig(varg.FD)
            if( DBG == TRUE):
                print "C111GUI_FileDescriptor: Boot_config:", bc
        except:
            pass
            
        self.STOPTDC_fc()
        self.setUpMainWindow()
        self.Update_window() 
        
        return

    def setfiledescriptor(self):
        global varg
        global constg
        
        FD_dialog = C111GUI_FileDescriptor(self, "Download for the File descriptor", TRUE, Qt.WType_Dialog)
        FD_dialog.exec_loop()
        FD_dialog.close()
        varg.DefaultCfg = C111Cfg("Default settings" )
        varg.DefaultCfg.SetTdcHandle( varg.FD )
        
        if( varg.DefaultCfg.GetRealOperationMode() == constg.GFD):
            #varg.cfg_path = constg.CFG_PATH_GFD2D ;
            varg.cfg_path += constg.CFG_DIR_GFD2D
        elif( varg.DefaultCfg.GetRealOperationMode() == constg.MHIT or
              varg.DefaultCfg.GetRealOperationMode() == constg.MHIP):
            print "C111 still in MHIT/MHIP mode !!!!!! \n"
        else:
            QMessageBox.critical( 0, " P/C111 GUI ",
                            QString("An internal error occurred. \n") +
                            "Cannot identify operation mode !!!\n"+
                            "\n\n<Application> will now exit." )
            self.exitGui()
        varg.DefaultCfg.SetCfgDirPath( varg.cfg_path )
        f = varg.cfg_path + "DefaultSettings.cfg"
        varg.DefaultCfg.FromFile( f )   
        #tdc = sett['TdcSettings'] ; run = sett['RunSettings'] ;
        varg.LastCfg = C111Cfg("Last configuration used")
            
        f = varg.cfg_path + "LastUsed.cfg"
        varg.LastCfg.FromFile( f )
        varg.LastCfg.SetTdcHandle( varg.FD )
        varg.LastCfg.SetCfgDirPath( varg.cfg_path )
        
        varg.CurrentCfg = C111Cfg("Current settings" )
        sett = varg.LastCfg.ToSettings()
        varg.CurrentCfg.FromSettings( sett )
        varg.CurrentCfg.SetTdcHandle( varg.FD )
        varg.CurrentCfg.SetCfgDirPath( varg.cfg_path )
        #varg.LastCfg.PrintCfg()
        if (sys.platform == "win32"):
            self.img_dir = "C:\\TEMP" ;
        else: 
            self.img_dir = "/tmp" ;

    def exitGui(self):
        global varg
        global constg
        
        om = varg.CurrentCfg.GetRealOperationMode()
        if (om == constg.GFD and varg.AcquisitionDATA == 1):
            ret = QMessageBox.information( self, "C111 GUI",
                                    "The current GFD 2D image has not been saved !\n"
                                    "Do you want to save it ?",
                                    "&Save", "&Discard", "Cancel",
                                    0,      # Enter == button 0
                                    2 )     # Escape == button 2

            if ret==0:
                # Save clicked or Alt+S pressed  or Enter pressed.
                # save
                self.Save_Image2D()  # GFD2D
            elif ret==1:
                # Discard clicked or  Alt+D pressed
                # don't save but exit
                pass
            elif ret==2:
                # Cancel clicked or  Alt+C pressed or Escape pressed
                # don't exit
                return
            
        self.C111GUI_MenuTimer.stop()
    #self.statTimer.stop()
        if( varg.FD != -1):
            varg.c111.stopTdc(varg.FD)
        f = varg.cfg_path + "LastUsed.cfg"
        varg.CurrentCfg.SaveToFile( f )
        qApp.closeAllWindows()
        qApp.quit()
   
    def LoadConfig(self):
        global varg
        global constg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        fname = QFileDialog.getOpenFileName(
                    varg.cfg_path ,
                    "Config files (*.cfg)", self, "Open config file dialog"
                    "Choose a filename to load" )
        if fname.isEmpty():
            return
        d = string.split( str(fname), "/" )
        #print "D: ", d
        filename = "" 
        for i in range(len(d) -1):
            filename = filename + d[i] + "\\"
        filename = filename + d[len(d)-1]
        
        if( DBG == 1 ):
            print "Loading :", filename
        varg.LoadedCfg= C111Cfg()
        varg.LoadedCfg.FromFile(filename)
        varg.LoadedCfg.SetTdcHandle( varg.FD )
        varg.LoadedCfg.SetCfgDirPath( varg.cfg_path )
        if( DBG == 1 ):
            varg.LoadedCfg.PrintCfg()
        self.STOPTDC_fc()
        if( varg.statsActive == 1):
            varg.dict_dialgs["TdcStatistics"].CloseStats()
        d = ConfigC111Dialog( self, varg.LoadedCfg )
        d.show()
        d.exec_loop()
        cfg_state = varg.LoadedCfg.GetState()
        if( (cfg_state == constg.CFG_DOWNLOADED) or
            (cfg_state == constg.CFG_DOWNLOADED_SAVED) or
            (cfg_state == constg.CFG_SAVED_DOWNLOADED)  ):
            sett = varg.CurrentCfg.ToSettings()
            varg.LastCfg.FromSettings( sett ) 
            sett = varg.LoadedCfg.ToSettings()
            varg.CurrentCfg.FromSettings( sett ) 
            varg.CurrentCfg.DownloadToTdc()
            self.Setting.setItemEnabled(self.readHardMenuItemID, TRUE);
            
            #self.C111_mainWidget.erase()
            #self.setUpMainWindow()
        self.Update_window()

    def LaunchServer(self):
        global varg
        global constg
        
        if( varg.AcquisitionDATA == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("Remote Server startup not allowed while image acquisition is running! "))
            return
        
        if( varg.FD != -1):
            varg.c111.close(varg.FD)
            self.devManageAction.setMenuText("Attach device")
            self.devManageAction.setStatusTip("to C111 device")
            
        varg.FD = -1
        
        self.C111GUI_MenuTimer.stop()
        f = varg.cfg_path + "LastUsed.cfg"
        varg.CurrentCfg.SaveToFile( f )
        
        f = constg.CFG_PATH_MAIN  +  constg.CFG_PATH_SERVER ;
        f = f   + constg.CFG_SERVER_FILE1D ;
        try:
            os.remove( f ) ;
        except:
            pass
        f = constg.CFG_PATH_MAIN  +  constg.CFG_PATH_SERVER ;
        f = f   + constg.CFG_SERVER_FILE2D ;
        try:
            os.remove( f ) ;
        except:
            pass
        
        varg.CurrentCfg.SaveToFile( f )
        
        server_exec = constg.CFG_PATH_PROG  + constg.CFG_PATH_PROG_SERVER + "DasyServer.bat";
        if( sys.platform == "win32"):
            #pid = os.spawnl( os.P_WAIT, 'C:\\Program Files\\C111TST\\DasyServer\\main.py')
            pid = os.spawnl( os.P_WAIT, server_exec )
        else:
            pid = os.spawnl( os.P_WAIT, server_exec )
        
        varg.FD = varg.c111.reopen(varg.new_DeviceFilename)
        if( DBG == TRUE):
            varg.c111.setLibDebug(1)
            varg.c111.setDriverDebug(varg.FD,4)
        else:
            varg.c111.setLibDebug(0)
            varg.c111.setDriverDebug(varg.FD,0)
            varg.c111.stopTdc(varg.FD)
        try:
            bc = varg.c111.getBootConfig(varg.FD)
            if( DBG == TRUE):
                print "C111GUI_FileDescriptor: Boot_config:", bc
        except:
            pass
            
        self.devManageAction.setMenuText("Detach device")
        self.devManageAction.setStatusTip("to C111 device") 
        self.STOPTDC_fc()
        self.setUpMainWindow()
        self.Update_window() 
        
        return

        
    def RemoteParams(self):
        global varg
        global constg
        rempars_dialg = RemoteParamsImpl(self, 
                            "REMPARS", FALSE, Qt.WType_Dialog) 
        rempars_dialg.show()
        rempars_dialg.exec_loop
        
    def SaveSrvConf(self):
        global varg
        global constg
        
        f = varg.cfg_path + "LastUsed.cfg"
        cfg_state = varg.CurrentCfg.GetState()
        if( (cfg_state != constg.CFG_DOWNLOADED) and
            (cfg_state != constg.CFG_DOWNLOADED_SAVED) and
            (cfg_state != constg.CFG_SAVED_DOWNLOADED)  ):
            QMessageBox.warning(self,"Warning",
                " Current config not downloaded to TDC, \n Download it first !!! ")
            return self
        
        varg.CurrentCfg.SaveToFile( f )
        
        f = constg.CFG_PATH_MAIN  +  constg.CFG_PATH_SERVER ;
        f = f   + constg.CFG_SERVER_FILE1D ;
        try:
            os.remove( f ) ;
        except:
            pass
        f = constg.CFG_PATH_MAIN  +  constg.CFG_PATH_SERVER ;
        f = f   + constg.CFG_SERVER_FILE2D ;
        try:
            os.remove( f ) ;
        except:
            pass
        
        varg.CurrentCfg.SaveToFile( f )
        
        msg = "Current downloaded config has been saved for Dasy server in : \n" + str(f) ;
        QMessageBox.information(self,"C111 GUI", msg)
        
        return
                          
# Definition of the Menu Bar
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
    def SetUpMenuWindow(self):
        self.PrintIcon = QIconSet( QPixmap ( fileprint ) )
        self.File = QPopupMenu(self)
        self.File.insertItem( "&Save Data File", self.DataFile, Qt.CTRL+Qt.Key_S )
        self.File.insertItem( self.PrintIcon,"&Print", self.PrintImage, Qt.CTRL+Qt.Key_P )
        self.File.insertItem( "&View image file", self.ViewImage, Qt.CTRL+Qt.Key_V )
        self.File.insertItem( "&Launch Remote Server", self.LaunchServer, Qt.CTRL+Qt.Key_L )
        self.File.insertItem("E&xit", self.exitGui , Qt.CTRL+Qt.Key_X )

        self.Setting = QPopupMenu(self)
        self.Setting.insertItem("Load a configuration",self.LoadConfig )
        self.Setting.insertSeparator()
        self.Setting.insertItem("Use Last configuration",self.LastConfig)
        self.Setting.insertItem("Use Default configuration",self.DefaultConfig)
        self.Setting.insertItem("Use Current configuration",self.CurrentConfig)
        self.Setting.insertItem("Create new Configuration",self.NewConfig )
        self.Setting.insertSeparator()
        self.readHardMenuItemID = self.Setting.insertItem("Read hardware settings",self.ReadHard)
        self.Setting.connectItem(self.readHardMenuItemID , self.Update_window )
        self.Setting.insertSeparator()
        self.Setting.insertItem("Modify Remote Server Parameters",self.RemoteParams)
        
        self.Tools = QPopupMenu(self)
        self.Tools.insertItem( "Auto-Tune 2D", self.ToolsAutoTune2D)
        self.Tools.insertItem( "Statistics Display",  self.ToolsStatisticDisplay)
        self.Tools.insertItem( "CUB Status", self.ToolsCUBStatus)

        self.Tools.insertSeparator()
        self.devManageAction = QAction(self,"devManageAction")
        self.devManageAction.addTo(self.Tools)
        self.connect(self.devManageAction,SIGNAL("activated()"),self.ToolsDevManage)
        self.devManageAction.setText("Detach device")
        self.devManageAction.setMenuText("Detach device")
        self.devManageAction.setStatusTip("Release connection to C111 device")
        
        self.Tools.insertSeparator()
        self.downloadVirtex = QAction(self,"downloadVirtex")
        self.downloadVirtex.addTo(self.Tools)
        self.connect(self.downloadVirtex,SIGNAL("activated()"),self.ModeGFD)
        self.downloadVirtex.setText("Download GFD Virtex to C111")
        self.downloadVirtex.setMenuText("Download GFD Virtex to C111")
        #self.devManageAction.setStatusTip("Release connection to C111 device")
        
        self.Tools.insertSeparator()
        self.memoryTest = QAction(self,"memoryTest")
        self.memoryTest.addTo(self.Tools)
        self.connect(self.memoryTest,SIGNAL("activated()"),self.MemoryTest)
        self.memoryTest.setText("P/C111 memory test")
        self.memoryTest.setMenuText("P/C111 memory test")
        self.memoryTest.setStatusTip("Will launch c111tst with -mv options")
        
        self.basicTest = QAction(self,"basicTest")
        self.basicTest.addTo(self.Tools)
        self.connect(self.basicTest,SIGNAL("activated()"),self.BasicTest)
        self.basicTest.setText("P/C111 basic test")
        self.basicTest.setMenuText("P/C111 basic test")
        self.basicTest.setStatusTip("Will launch c111tst with -iv options")
        
        self.Tools.insertSeparator()
        self.saveSrvConf = QAction(self,"srvConf")
        self.saveSrvConf.addTo(self.Tools)
        self.connect(self.saveSrvConf,SIGNAL("activated()"),self.SaveSrvConf)
        self.saveSrvConf.setText("Save config for DasyServer ")
        self.saveSrvConf.setMenuText("Save config for DasyServer ")
        self.saveSrvConf.setStatusTip("Will save the current downloaded P/C111 config for DasyServer")
        
        
        self.help = QPopupMenu( self )
        self.help.insertItem( "About", self.about)
        self.help.insertSeparator()
        self.help.insertItem( "GUI General Help", self.generalHelp)
        self.help.insertItem( "C111 users guide", self.usersGuide)
        self.help.insertItem( "GFD Quick Start", self.quickStart)
        self.help.insertItem( "Issues", self.issuesHelp)
        self.help.insertSeparator()
        self.help.insertItem( "DasyServer Help", self.serverHelp)
        
        self.menu = QMenuBar(self)
        self.menu.insertItem("File",self.File)
        self.menu.insertItem("Settings",self.Setting)
        self.menu.insertItem("Tools",self.Tools)
        self.menu.insertSeparator()
        self.menu.insertItem("Help",self.help)

    def ToolsDevManage(self):
        global varg
        
        #print "ToolsDevManage \n"
        if (varg.FD != -1):
            self.STOPTDC_fc()
            varg.c111.close(varg.FD)
            varg.FD = -1
            self.devManageAction.setMenuText("Attach device")
            self.devManageAction.setStatusTip("to C111 device")
        elif( varg.FD == -1):
            varg.FD = varg.c111.reopen(varg.new_DeviceFilename)
            if( DBG == TRUE):
                varg.c111.setLibDebug(1)
                varg.c111.setDriverDebug(varg.FD,4)
            else:
                varg.c111.setLibDebug(0)
                varg.c111.setDriverDebug(varg.FD,0)
                varg.c111.stopTdc(varg.FD)
            try:
                bc = varg.c111.getBootConfig(varg.FD)
                if( DBG == TRUE):
                    print "DevManage: Boot_config:", bc
            except:
                pass
            self.devManageAction.setMenuText("Detach device")
            self.devManageAction.setStatusTip("to C111 device")
        self.setUpMainWindow()
        self.Update_window()

# Definition of the Main Window widget
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
    def setUpMainWindow(self):
        global varg
        
        self.C111_mainWidget = QWidget(self,"C111_mainWidget")
        self.C111_MainWindowLayout = QGridLayout(self.C111_mainWidget,1,4,0,10,
                                                        "C111_MainWindowLayout")
        varg.container=Container(self.C111_mainWidget)
        #varg.splitter = QSplitter(Qt.Vertical,varg.container)
        varg.splitter = QSplitter(Qt.Vertical,varg.container)
            
        varg.graph = GraphView.GraphView(None,
        {"AddStyleSelect":1,"AddStatus":1,"AutoHideStatus":1,"AddCursorSelect":1,"AddLog":0})
        varg.graph.AddMenuPopupItem("Toggle Log X",self.Log_X)
        varg.graph.AddMenuPopupItem("Toggle Log Y",self.Log_Y)
        varg.graph.SetSize(300 , 200)
            
        varg.view = MyView(varg.splitter )
        varg.view.AddMenuPopupItem("Save Image", self.Save_Image2D)
        varg.data_2D= EdfFileData.EdfFileData()
        varg.data_2D.SetSource("tempdat.edf")
        varg.view.SetSource(ColormapFilter(None,RectSelection(varg.data_2D)))
        varg.data_2D.LoadSource()
        varg.container.SetSize(600,400)
        varg.container.Show()
        varg.view.Show()
        
        self.C111_MainWindowLayout.addMultiCellWidget(varg.container,0,0,0,4)
	
        self.buttonSTARTTDC = QPushButton(self.C111_mainWidget,"buttonSTARTTDC")
        self.buttonSTARTTDC.setText(self.trUtf8("RUN "))
        self.buttonSTARTTDC.setAutoDefault(1)
        self.buttonSTARTTDC.setDefault(1)
        self.C111_MainWindowLayout.addWidget(self.buttonSTARTTDC,1,0)
        
        self.Informationlabel = QLabel(self.C111_mainWidget)
        self.Informationlabel.setFrameStyle( QFrame.Box | QFrame.Raised )
        self.Informationlabel.setLineWidth( 2.5 )
        self.Informationlabel.setAlignment( Qt.AlignCenter )
        #self.C111_MainWindowLayout.addMultiCellWidget(self.Informationlabel,1,1,1,2)
        self.C111_MainWindowLayout.addWidget(self.Informationlabel,1,1)
        
        self.NbHitsLabel = QLabel(self.C111_mainWidget)
        self.NbHitsLabel.setFrameStyle( QFrame.Box | QFrame.Raised )
        self.NbHitsLabel.setLineWidth( 2.5 )
        self.NbHitsLabel.setAlignment( Qt.AlignCenter )
        self.C111_MainWindowLayout.addWidget(self.NbHitsLabel,1,2)
        
        self.buttonSTOPTDC = QPushButton(self.C111_mainWidget,"buttonSTOPTDC")
        self.buttonSTOPTDC.setText(self.trUtf8("STOP "))
        self.buttonSTOPTDC.setAutoDefault(1)
        self.C111_MainWindowLayout.addWidget(self.buttonSTOPTDC,1,3)
            
        self.buttonFREEZETDC = QPushButton(self.C111_mainWidget,"buttonFREEZETDC")
        self.buttonFREEZETDC.setText(self.trUtf8("FREEZE"))
        self.C111_MainWindowLayout.addWidget(self.buttonFREEZETDC,1,4)
	
	self.C111_mainWidget.repaint()
	self.C111_mainWidget.show()
	self.setCentralWidget(self.C111_mainWidget)	
	
	self.C111GUI_MenuTimer = QTimer(self,"C111GUI_MenuTimer")
	self.C111GUI_LabelTimer= QTimer(self,"C111GUI_LabelTimer")

###############
# CONNECTIONS #
###############
	self.connect(self.buttonSTARTTDC,SIGNAL("clicked()"),self.STARTTDC_fc)
	self.connect(self.buttonSTOPTDC,SIGNAL("clicked()"),self.STOPTDC_fc)
	self.connect(self.buttonFREEZETDC,SIGNAL("clicked()"),self.FREEZETDC_fc)
	self.connect(self.C111GUI_MenuTimer,SIGNAL("timeout()"),self.refresh_display )	
	self.connect(self.C111GUI_LabelTimer,SIGNAL("timeout()"),self.label_display )
	
	
# QTimer function for the display refresh
#########################################
    def TimerDisplay(self):
        global varg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        uit = varg.CurrentCfg.GetUpdateInterval()   
	if (DBG == TRUE):
	    print "\n TimerDisplay enter: ", uit
	try:
	    TDC_getstatus = varg.c111.getTdcStatus(varg.FD)
	    varg.START_TDC = TDC_getstatus['AcqState']
	except:
	    varg.START_TDC = 0
	    pass
	    
	if (DBG == TRUE):
	    print "\n TimerDisplay enter : ", TDC_getstatus
	    print "\n TimerDisplay enter : ", varg.START_TDC
        
	if(( uit != -1) and (varg.START_TDC == 1)):    
            self.C111GUI_MenuTimer.start( uit * 1000 )
            if (DBG == TRUE):
                print "\n QTimer activated uit: \n", uit

    def label_display(self):
        global varg
        global constg
        
        varg.view.SetLabels(varg.Graph_title, varg.Graph_xlabel, varg.Graph_ylabel)
        varg.view.Update()
	
######################################### 
# Definition of the functions connected #
#########################################
# For the File Menu:
# ------------------	
    def DataFile(self):
        global varg 
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
	if (varg.AcquisitionDATA == -1):
		QMessageBox.warning(self,"Warning",self.trUtf8("No acquisition data has been done "))
		return self
        self.STOPTDC_fc()

	fname = QFileDialog.getSaveFileName(
                    self.img_dir ,
                    "EDF files (*.edf)", self, "Save Image file dialog"
                    "Choose a filename to save under" )
        if fname.isEmpty():
            return
        d = string.split( str(fname), "/" )
        filename = "" 
        for i in range(len(d) -1):
            filename = filename + d[i] + "\\"
        filename = filename + d[len(d)-1]
        t = string.split( str(filename), ".")
        if( len(t) < 2):
            filename = filename + ".edf"
        else:
            if ( t[1] != "edf" and t[1] != "EDF"):
                filename = filename + ".edf"
        self.img_dir = os.path.dirname( str(filename) )	
        header = {'Title'    : "C111_GFD2D_data"}
        file_edf = EdfFile.EdfFile( filename )
        #  file_edf = EdfFile.EdfFile(str(new_DataFilename) + ".edf")
        file_edf.WriteImage(header,varg.array_buf_1,1,'UnsignedLong',0,'HighByteFirst')
        file_edf.File.close()
        
        s = "Image (edf)  saved successfully to: \n" + filename + " "
        QMessageBox.information(self,"Information", s)
        
        return

    def ViewImage(self):
        global varg
        global constg
        
        if( varg.statsActive == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("View Image (.edf) not allowed while statistics display is running! "))
            return
            
        if( varg.AcquisitionDATA == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("View Image (.edf) not allowed while image acquisition is running! "))
            return
            
        fname = QFileDialog.getOpenFileName(self.img_dir , "Image files (*.edf)", 
                    self, "View Image file dialog"
                    "Choose a filename to View" )
        if fname.isEmpty():
            return
        d = string.split( str(fname), "/" )
        #print "D: ", d
        filename = "" 
        for i in range(len(d) -1):
            filename = filename + d[i] + "\\"
        filename = filename + d[len(d)-1]
        self.img_dir = os.path.dirname( str(filename )) ;
        varg.data_2D = ""
        gc.collect()
        varg.data_2D= EdfFileData.EdfFileData()
        varg.data_2D.SetSource(filename)
        varg.view.SetSource(ColormapFilter(None,RectSelection(varg.data_2D)))
        varg.data_2D.LoadSource()
        varg.container.Show()
        varg.view.Show()
        varg.view.Update( )
        return
        	
    def PrintImage(self):
        global varg
        global constg
        
	gettdcconfig = varg.c111.getTdcConfig(varg.FD)
	
	if (DBG == TRUE):
	    print "\n all formats supported : ", varg.view.GetSaveFormats()
		
	if "PS" not in varg.view.GetSaveFormats():
            self.statusBar().message('Unable to print',4000)
            return
        if self.printer.setup(self):
            self.statusBar().message('Printing...')
            varg.view.Save("tmp.ps","PS")
	    
	    printername= str(self.printer.printerName())
	    if (sys.platform != "win32"):
                os.system("lp -c -d " + printername + "tmp.ps")
            else:
                import win32print
                printer=win32print.OpenPrinter(printername)
                win32print.StartDocPrinter(printer,1,("C111py Doc",None,None))
                psfile=open("tmp.ps",'r')
                win32print.WritePrinter(printer,psfile.read())
                win32print.EndDocPrinter(printer)
                win32print.ClosePrinter(printer)
                psfile.close()                     
            os.remove("tmp.ps")
	    self.statusBar().message('Printing completed', 4000)
        else:
            self.statusBar().message('Printing aborted', 4000)
           
    def about(self):
	QMessageBox.information(self,"C111 GUI",
	" Version 5.0. Author: B. Scaringella (23-12) \n Copyright (c)  2003 by  ESRF Grenoble, France")
	
    def generalHelp(self, *args):
        pid = os.spawnl( os.P_NOWAIT, "C:\Program Files\Internet Explorer\IEXPLORE.EXE"  ,  
                                                       " C:\Python23\Lib\site-packages\C111GUI-2D\C111GuiHelp.html")
        
    def quickStart(self, *args):
                pid = os.spawnl( os.P_NOWAIT, "C:\Program Files\Internet Explorer\IEXPLORE.EXE"  ,  
                                                       " C:\Python23\Lib\site-packages\C111GUI-2D\C111GuiQuickStart.html")
        
    def issuesHelp(self, *args):
                pid = os.spawnl( os.P_NOWAIT, "C:\Program Files\Internet Explorer\IEXPLORE.EXE"  ,  
                                                       " C:\Python23\Lib\site-packages\C111GUI-2D\C111GuiIssues.html")

    def usersGuide(self, *args):
                pid = os.spawnl( os.P_NOWAIT, "C:\Program Files\Internet Explorer\IEXPLORE.EXE"  ,  
                                                       " C:\Python23\Lib\site-packages\C111GUI-2D\C111-TDC-data-sheet.mht")
                                                                                                
    def serverHelp(self, *args):
                pid = os.spawnl( os.P_NOWAIT, "C:\Program Files\Internet Explorer\IEXPLORE.EXE"  ,  
                                                       " C:\Python23\Lib\site-packages\C111GUI-2D\DasyServerHelp.mht")
                   	
# For the Mode Menu:
# ------------------
    def ModeGFD(self):
        global varg
        global constg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        if( varg.CurrentCfg.GetRealOperationMode() == constg.GFD ):
            QMessageBox.warning(self,"Warning"," Already using GFD mode \n No need to change !!! ")
            return
        
	TDC_getstatus = varg.c111.getTdcStatus(varg.FD)
	#global START_TDC
	varg.START_TDC = TDC_getstatus['AcqState']

	if (varg.START_TDC == 1):
		QMessageBox.warning(self,"Warning",
		" The TDC is running, \n stop the TDC to change parameters ")
		return self
	else:
		pass

	# load virtex with the GFD file
	ret = QMessageBox.warning( self, "C111 GUI",
            "Are you sure you want to download the virtex\n for Gaz Field Detector mode.\n\n",
            "Yes", "No",  None, 0, 1 )
        if ret==1:
            return
        
        self.progressBar.setProgress(1)
        self.modeTimer.start(100)    
        self.progressBar.show()
        
	if( sys.platform == "win32"):
            Virtex_gfd = varg.c111.loadVirtex(varg.FD,0,"C:\\Program Files\\C111TST")
        else:
            Virtex_gfd = varg.c111.loadVirtex(varg.FD,0,"/users/iorini/C111_7/src")
       	    
	operation_mode = varg.c111.getBootConfig(varg.FD)
	self.progressBar.hide()
	self.modeTimer.stop()
	
	if ( operation_mode != constg.GFD ):
		QMessageBox.critical(self,"Critical",
		" \t Critical Error occured \n Boot configuration for mode GFD has failed")
		varg.c111.close(varg.FD)
		qApp.quit()
		
        #varg.cfg_path = constg.CFG_PATH_GFD2D ;
        #varg.cfg_path +  
        varg.DefaultCfg = C111Cfg("Default settings" )
        varg.DefaultCfg.SetTdcHandle( varg.FD )
        
        if( varg.DefaultCfg.GetRealOperationMode() == constg.GFD):
            #varg.cfg_path = constg.CFG_PATH_GFD2D ;
            varg.cfg_path += constg.CFG_DIR_GFD2D
        elif( varg.DefaultCfg.GetRealOperationMode() == constg.MHIT or
              varg.DefaultCfg.GetRealOperationMode() == constg.MHIP):
            print "C111 still in MHIT/MHIP mode !!!!!! \n"
        else:
            QMessageBox.critical( 0, " P/C111 GUI ",
                            QString("An internal error occurred. \n") +
                            "Cannot identify operation mode !!!\n"+
                            "\n\n<Application> will now exit." )
            self.exitGui()
        varg.DefaultCfg.SetCfgDirPath( varg.cfg_path )
        f = varg.cfg_path + "DefaultSettings.cfg"
        varg.DefaultCfg.FromFile( f )   
        #tdc = sett['TdcSettings'] ; run = sett['RunSettings'] ;
        varg.LastCfg = C111Cfg("Last configuration used")
            
        f = varg.cfg_path + "LastUsed.cfg"
        varg.LastCfg.FromFile( f )
        varg.LastCfg.SetTdcHandle( varg.FD )
        varg.LastCfg.SetCfgDirPath( varg.cfg_path )
        
        varg.CurrentCfg = C111Cfg("Current settings" )
        sett = varg.LastCfg.ToSettings()
        varg.CurrentCfg.FromSettings( sett )
        varg.CurrentCfg.SetTdcHandle( varg.FD )
        varg.CurrentCfg.SetCfgDirPath( varg.cfg_path )
        #varg.StartupCfg.FromTdcSettings( tdcset )
        self.setUpMainWindow()
        self.Update_window()

    def updProgressBar(self):
        if( DBG == TRUE):
            print "Enter updProgressBar() ", self.progressBar.progress
        self.progressBar.setProgress( self.progressBar.progress() + 1 )
        self.progressBar.show()
        qApp.processEvents()
        
    def Update_window(self):	
        global varg
        global constg
        
        if( varg.FD == -1):
            self.Informationlabel.setText("C111 DEVICE NOT ATTACHED")
            self.Informationlabel.setPaletteBackgroundColor(QColor(255,255,255))
            #QMessageBox.warning(self,"Warning"," No device attached !!\n Need to attach one first !!! ")
            return

        hsum = varg.c111.getLastHistSum(varg.FD)
        om = varg.CurrentCfg.GetRealOperationMode()
        tdc = varg.CurrentCfg.ToTdcSettings()
        if (om == constg.GFD ):
            s = "TOTAL HITS : " + str(hsum) + "  "
            self.Informationlabel.setText("MODE GFD")
            self.NbHitsLabel.setText( s )
            self.Informationlabel.setPaletteBackgroundColor(QColor(85,255,255))
            if( tdc[constg.IDX_PILEUPX] == 0):
                self.Setting.setItemEnabled(self.readHardMenuItemID, FALSE );
	elif( om == constg.MHIT):
            self.Informationlabel.setText("MODE MHIT")
            #self.Informationlabel.setPaletteBackgroundColor(QColor(85,255,255))
            self.Informationlabel.setPaletteBackgroundColor(QColor("red"))
            self.Setting.setItemEnabled(self.readHardMenuItemID, TRUE);
        elif( om == constg.MHIP):
            self.Informationlabel.setText("MODE MHIP")
            #self.Informationlabel.setPaletteBackgroundColor(QColor(85,255,255))
            self.Informationlabel.setPaletteBackgroundColor(QColor("red"))
            self.Setting.setItemEnabled(self.readHardMenuItemID, TRUE);
	else:
	        self.Setting.setItemEnabled(self.readHardMenuItemID, FALSE );


    def LastConfig(self):
        global varg
        global constg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        rm = varg.LastCfg.GetRealOperationMode()
        cm = varg.LastCfg.GetOperationMode()
            
        if( rm  != cm ):
            QMessageBox.warning(self,"Warning",
            " The virtex mode doesn't correspond to the last one loaded")
            return self
        self.STOPTDC_fc()
        if( varg.statsActive == 1):
            varg.dict_dialgs["TdcStatistics"].CloseStats()
        tdcStatus = varg.c111.getTdcStatus(varg.FD)
        if ( tdcStatus["AcqState"] == 1):
            QMessageBox.warning(self,"Warning",
            " The TDC is running, \n stop the TDC to change parameters ")
            return self
            
	varg.TDC_lastconfig = 1
	varg.TDCstructure_checking = -1
	#dialgLastTDC = C111GUI_TDCconfigDialog(self, "TDC Parameters configuration", TRUE, Qt.WType_Dialog)
	d = ConfigC111Dialog( self, varg.LastCfg )
	d.show()
	d.exec_loop()
	#self.C111_mainWidget.erase()
	#self.setUpMainWindow()
	self.Update_window()
	cfg_state = varg.LastCfg.GetState()
	if( (cfg_state == constg.CFG_DOWNLOADED) or
	    (cfg_state == constg.CFG_DOWNLOADED_SAVED) or
	    (cfg_state == constg.CFG_SAVED_DOWNLOADED)  ):
	    l = varg.LastCfg.ToSettings()
	    c = varg.CurrentCfg.ToSettings()
	    varg.LastCfg.FromSettings( c )
	    varg.CurrentCfg.FromSettings( l )
	    varg.CurrentCfg.DownloadToTdc()
	    self.Setting.setItemEnabled(self.readHardMenuItemID, TRUE);
	    
    def DefaultConfig(self):
        global varg
        global constg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        rm = varg.DefaultCfg.GetRealOperationMode()
        
        self.STOPTDC_fc()
        if( varg.statsActive == 1):
            varg.dict_dialgs["TdcStatistics"].close()
        tdcStatus = varg.c111.getTdcStatus(varg.FD)
        if ( tdcStatus["AcqState"] == 1):
            QMessageBox.warning(self,"Warning",
            " The TDC is running, \n stop the TDC to change parameters ")
            return self
            
        varg.TDC_lastconfig = 1
        varg.TDCstructure_checking = -1
        #dialgLastTDC = C111GUI_TDCconfigDialog(self, "TDC Parameters configuration", TRUE, Qt.WType_Dialog)
        d = ConfigC111Dialog( self, varg.DefaultCfg )
        d.show()
        d.exec_loop()
        #self.C111_mainWidget.erase()
        #self.setUpMainWindow()
        self.Update_window()
        cfg_state = varg.DefaultCfg.GetState()
        if( (cfg_state == constg.CFG_DOWNLOADED) or
            (cfg_state == constg.CFG_DOWNLOADED_SAVED) or
            (cfg_state == constg.CFG_SAVED_DOWNLOADED)  ):
            c = varg.CurrentCfg.ToSettings()
            s = varg.DefaultCfg.ToSettings()
            varg.CurrentCfg.FromSettings( s ) 
            varg.LastCfg.FromSettings( c )
            varg.CurrentCfg.DownloadToTdc()
            
    def ReadHard(self):
        global varg
        global constg
         
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
               
        hwtdc = varg.c111.getTdcConfigHw( varg.FD )
        run = varg.CurrentCfg.ToRunSettings()
        #tdc = varg.CurrentCfg.ToTdcSettings()
        #to =  hwtdc[constg.IDX_TIMEOUT]  
        hardCfg = C111Cfg("Harware Settings")
        hardCfg.SetTdcHandle( varg.FD )
        hardCfg.SetCfgDirPath( varg.cfg_path )
        hardCfg.FromTdcSettings( hwtdc )
        hardCfg.FromRunSettings( run )
        d = ConfigC111Dialog( self , hardCfg , TRUE)
        d.show()
        d.exec_loop()
    
    def CurrentConfig(self):
        global varg
        global constg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        rm = varg.CurrentCfg.GetRealOperationMode()
        cm = varg.CurrentCfg.GetOperationMode()

        if( rm  != cm ):
            QMessageBox.warning(self,"Warning",
            " The virtex mode doesn't correspond to the last one loaded")
            return self
        
        self.STOPTDC_fc()
        if( varg.statsActive == 1):
            varg.dict_dialgs["TdcStatistics"].CloseStats()
        tdcStatus = varg.c111.getTdcStatus(varg.FD)
        if ( tdcStatus["AcqState"] == 1):
            QMessageBox.warning(self,"Warning",
            " The TDC is running, \n stop the TDC to change parameters ")
            return self
            
        c = varg.CurrentCfg.ToSettings()   
        varg.TDC_lastconfig = 1
        varg.TDCstructure_checking = -1
        #dialgLastTDC = C111GUI_TDCconfigDialog(self, "TDC Parameters configuration", TRUE, Qt.WType_Dialog)
        d = ConfigC111Dialog( self, varg.CurrentCfg )
        d.show()
        d.exec_loop()
        
        cfg_state = varg.CurrentCfg.GetState()
        if( (cfg_state == constg.CFG_DOWNLOADED) or
            (cfg_state == constg.CFG_DOWNLOADED_SAVED) or
            (cfg_state == constg.CFG_SAVED_DOWNLOADED)  ):
            varg.LastCfg.FromSettings( c )
            self.Setting.setItemEnabled(self.readHardMenuItemID, TRUE);

        #self.C111_mainWidget.erase()
        #self.setUpMainWindow()
        self.Update_window()        
	
    def NewConfig (self):
        global varg
        global constg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        varg.NewCfg = C111Cfg()
        varg.NewCfg.SetTdcHandle( varg.FD )
        varg.NewCfg.SetCfgDirPath( varg.cfg_path )
        self.STOPTDC_fc()
        if( varg.statsActive == 1):
            varg.dict_dialgs["TdcStatistics"].CloseStats()
        d = ConfigC111Dialog( self, varg.NewCfg )
        d.show()
        d.exec_loop()
        cfg_state = varg.NewCfg.GetState()
        if( (cfg_state == constg.CFG_DOWNLOADED) or
            (cfg_state == constg.CFG_DOWNLOADED_SAVED) or
            (cfg_state == constg.CFG_SAVED_DOWNLOADED)  ):
            c = varg.CurrentCfg.ToSettings()
            n = varg.NewCfg.ToSettings()
            varg.LastCfg.FromSettings( c )
            varg.CurrentCfg.FromSettings( n )
            varg.CurrentCfg.DownloadToTdc()
            self.Setting.setItemEnabled(self.readHardMenuItemID, TRUE);

	varg.TDCstructure_checking = -1
	#self.C111_mainWidget.erase()
	#self.setUpMainWindow()
	self.Update_window()

# For the Tools Menu:
# -------------------
    def ToolsFormconfig(self):
        if( sys.platform == "win32"):
            pass
        else:
            os.system("/segfs/bliss/depot/pythonesrf/solaris7/bin/qtconfig")

    def ToolsStatisticDisplay(self):
        global varg
        global constg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
	gettdcconfig = varg.c111.getTdcConfig(varg.FD)
	TDC_getstatus = varg.c111.getTdcStatus(varg.FD)
	
	if (int(gettdcconfig[ constg.IDX_INTERRUPT_TIMER]) != 1) :
		QMessageBox.warning(self,"Warning",
		" Timer interruption hasn't been set on TDC configuration ")
		return self
	
	if( varg.AcquisitionDATA == 1):
            QMessageBox.warning(self,"Warning",
                                              self.trUtf8("Statistics not allowed while image acquisition is running! "))
            return	
	if (TDC_getstatus['AcqState'] != 1):
	    varg.c111.startTdc(varg.FD , varg.CurrentCfg.GetFiniteTimeLength() * 1000000 )
	varg.statsActive = 1
	dialgTDCstat = C111GUI_TDCstatisticDialog(self, 
	                        "TDC Parameters configuration", FALSE, Qt.WType_Dialog)
	varg.dict_dialgs["TdcStatistics"] = dialgTDCstat 
	dialgTDCstat.show()
	dialgTDCstat.exec_loop
	#self.STOPTDC_fc()

    def ToolsCUBStatus(self):
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
	cub_status_dialog = C111GUI_CubStatusDisplay(self, 
	                        "CUB STATUS", FALSE, Qt.WType_Dialog) 
	cub_status_dialog.show()
	cub_status_dialog.exec_loop

    def CheckConfig(self):
        global varg, constg;
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        cfg_state = varg.CurrentCfg.GetState()
        if( cfg_state != constg.CFG_DOWNLOADED and
            cfg_state != constg.CFG_SAVED_DOWNLOADED and
            cfg_state != constg.CFG_DOWNLOADED_SAVED):
            #print "STARTTDC: No CFG downloaded to TDC, downloading LastUsed"
            last_tdc = varg.LastCfg.ToTdcSettings()
            last_run = varg.LastCfg.ToRunSettings() 
            opmode = varg.LastCfg.GetRealOperationMode()
            #print "\n STARTTDC: LAST RUN-SET: ", last_run , "\n"
            #print "\n STARTTDC: LAST TDC-SET: ", last_tdc , "\n"
            
            if( last_tdc[constg.IDX_TIMEOUT] == 0):
                last_tdc[constg.IDX_TIMEOUT] = constg.GFD_MAX_TIMEOUT;
                    
            if( last_tdc[constg.IDX_ACQU_BANK] != 0 and last_tdc[constg.IDX_ACQU_BANK] != 1):
                last_tdc[constg.IDX_ACQU_BANK] = 0 ;

            if( last_run[constg.IDX_END_COL] == 0):
                    last_run[constg.IDX_END_COL] = 1000
                    last_run[constg.IDX_ROI] = 1
                    last_run[constg.IDX_DISPLAY_UPDATE_INTERVAL] = 60
                    
            if( last_run[constg.IDX_END_ROW] == 0):
                    last_run[constg.IDX_END_ROW] = 1000
                    last_run[constg.IDX_ROI] = 1
                    last_run[constg.IDX_DISPLAY_UPDATE_INTERVAL] = 60
                    
            if( last_run[constg.IDX_DISPLAY_UPDATE_INTERVAL] == 0):
                last_run[constg.IDX_DISPLAY_UPDATE_INTERVAL] = 60
                
            varg.CurrentCfg.FromTdcSettings( last_tdc )
            varg.CurrentCfg.FromRunSettings( last_run )
            varg.CurrentCfg.DownloadToTdc()

# For the START TDC Button:
# -------------------------
    def STARTTDC_fc(self):
        global varg, constg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        if( varg.statsActive == 1):
            varg.dict_dialgs["TdcStatistics"].CloseStats()
        TDC_getstatus = varg.c111.getTdcStatus(varg.FD)
        if (TDC_getstatus['AcqState'] == 1):
            QMessageBox.warning(self,"Warning"," The TDC is running ")
            return self
        self.buttonSTARTTDC.setDisabled(TRUE)
        self.buttonSTOPTDC.setDisabled(FALSE)
        self.buttonFREEZETDC.setDisabled(FALSE)
        self.CheckConfig()
        runset = varg.CurrentCfg.ToRunSettings()
        tdcset = varg.CurrentCfg.ToTdcSettings()
        if( varg.CurrentCfg.GetFiniteTimeLength() != 0 ):
            varg.finiteAcqTimeOn = 1
            #print "FINITE TIME ON "
            
        s = "INITIALISING C111's MEMORY BANKS ...  "
        d = ( runset[constg.IDX_DISPLAY_UPDATE_INTERVAL] - 2) * 1000
        self.statusBar().message(s, d)
        
        #varg.c111.setAcqBank(varg.FD,0)
        #varg.c111.initBank(varg.FD,0,0)
        #varg.c111.setAcqBank(varg.FD,1)
        #varg.c111.initBank(varg.FD,0,0)
        
        if( DBG == 1):
            print "STARTTDC_fc: runset: ", runset
        
        rdh_1 = [   0,
                        runset[ constg.IDX_START_COL] , runset[ constg.IDX_END_COL] ,
                        runset[ constg.IDX_START_ROW], runset[ constg.IDX_END_ROW] ,
                        runset[ constg.IDX_BINNING]      ]
                                
        rdh_2 = [   1,
                        runset[ constg.IDX_START_COL] , runset[ constg.IDX_END_COL] ,
                        runset[ constg.IDX_START_ROW], runset[ constg.IDX_END_ROW],
                        runset[ constg.IDX_BINNING]        ]
                
        rdh_3 = [   2,
                        runset[ constg.IDX_START_COL] , runset[ constg.IDX_END_COL] ,
                        runset[ constg.IDX_START_ROW], runset[ constg.IDX_END_ROW] ,
                        runset[ constg.IDX_BINNING]       ]
                                
        rdh_4 = [   3,
                        runset[ constg.IDX_START_COL] , runset[ constg.IDX_END_COL] ,
                        runset[ constg.IDX_START_ROW], runset[ constg.IDX_END_ROW] ,
                        runset[ constg.IDX_BINNING]       ]
        
        varg.rdh = [ rdh_1, rdh_2, rdh_3, rdh_4 ]
            
        varg.view.SetZoom(val=None, rect=None, com="normal");
        varg.c111.startTdc(varg.FD , varg.CurrentCfg.GetFiniteTimeLength() * 1000000 )
        #self.buttonSTARTTDC.setDisabled(TRUE)
        #self.buttonSTOPTDC.setDisabled(FALSE)
        self.refresh_display()
        #self.TimerDisplay()
	
# For the STOP TDC Button:
# -------------------------
    def STOPTDC_fc(self):
        global varg
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        varg.START_TDC = 0
        varg.loopCount = 0
        self.C111GUI_MenuTimer.stop()
	#self.statTimer.stop()
        varg.c111.stopTdc(varg.FD)
        varg.c111.setAcqBank(varg.FD,0)
        varg.c111.initBank(varg.FD,0,0)
        varg.c111.setAcqBank(varg.FD,1)
        varg.c111.initBank(varg.FD,0,0)
        self.buttonSTARTTDC.setDisabled(FALSE)
        self.buttonSTOPTDC.setDisabled(TRUE)
        self.buttonFREEZETDC.setDisabled(TRUE)
        varg.AcquisitionDATA = 0
        uit = varg.CurrentCfg.GetUpdateInterval() 
        s = "TDC stopped and P/C111 memory cleared !"
        d = ( uit ) * 1000
        self.statusBar().message(s, d)
        
# For the STOP TDC Button:
# -------------------------
    def FREEZETDC_fc(self):
        global varg
        
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        varg.START_TDC = 0
        #varg.loopCount = 0
        self.C111GUI_MenuTimer.stop()
        varg.c111.stopTdc(varg.FD)
        self.buttonSTARTTDC.setDisabled(FALSE)
        self.buttonSTOPTDC.setDisabled(TRUE)
        self.buttonFREEZETDC.setDisabled(TRUE)
        #varg.AcquisitionDATA = 0
        uit = varg.CurrentCfg.GetUpdateInterval() 
        s = "TDC stopped but P/C111 memory NOT cleared !"
        d = ( uit ) * 1000
        self.statusBar().message(s, d)
        
	
# For the graph display option:
# -----------------------------
    def Log_X(self):
        global varg

        varg.graph.LogX = not varg.graph.LogX
        if varg.graph.LogX:
            varg.graph.SetXScaleLog()
        else:
            varg.graph.SetXScaleLinear()
        varg.graph.Update()
	
    def Log_Y(self):
        global varg
        
        varg.graph.LogY = not varg.graph.LogY
        if varg.graph.LogY:
            varg.graph.SetYScaleLog(1.0)
        else:
            varg.graph.SetYScaleLinear()
        varg.graph.Update()

    def Label_setting(self):
	dialgDisplayLabel = C111GUI_DisplayLabelDialog(self, 
	            "Graph Label Setting", TRUE, Qt.WType_Dialog)
	dialgDisplayLabel.exec_loop()
	self.label_display()
	#self.C111GUI_LabelTimer.start(100,TRUE)

# For the DATA DISPLAY :
# ---------------------
# TDC_GraphDisplay function display the data from the C111 TDC bank memory
# _______________________________________________________________________
    def TDC_GraphDisplay(self):
        global varg
        global constg

	if (DBG == TRUE):
	    print "Enter TDC_GraphDisplay( )"
        varg.hwMemDisplMeasure.restart( )
	tdcset = varg.CurrentCfg.ToTdcSettings()
	#runset = varg.CurrentCfg.ToRunSettings()
        cf = varg.view.GetColormapFilter()
        ip = cf.GetColormapParameters()
        varg.view.LockPosition(1)
        #print "Colormap: ", ip
	if ( tdcset[ constg.IDX_OPERATION_MODE ] == constg.GFD):
                varg.data_2D = Image( varg.array_buf_1 )
                varg.data_2D.SetColormapParameters(ip)
                varg.view.SetSource( varg.data_2D )
                varg.view.Show( )
                varg.view.Update( )
        
        self.Update_window()
        uit = varg.CurrentCfg.GetUpdateInterval() 
        if( varg.finiteAcqTimeOn == 1 ):
            varg.finiteAcqTimeOn = 2
            self.C111GUI_MenuTimer.start( uit * 1000 )
        elif( varg.finiteAcqTimeOn == 2):
            varg.finiteAcqTimeOn = 0
            self.FREEZETDC_fc()
        else:
            self.C111GUI_MenuTimer.start( uit * 1000 )
        

    def showMemReadTime(self):
        global varg
        global constg
        
        varg.loopCount = varg.loopCount + 1
        uit = varg.CurrentCfg.GetUpdateInterval() 
        e = varg.hwMemReadMeasure.elapsed()
        ne = int( e/1000 )
        if( uit < 5 ):
            uit += 5
            runset = varg.CurrentCfg.ToRunSettings()
            runset[constg.IDX_DISPLAY_UPDATE_INTERVAL] = uit
            varg.CurrentCfg.FromRunSettings( runset )
        s3 = "Loop number: " + str(varg.loopCount) + "."
        s1 = " Memory READ: " + str(e) + " msecs. "
        s2 = " Next acquisition starts in: "+ str(uit) + " secs."
        s = s3 + s1 + s2
        d = ( uit ) * 1000
        self.statusBar().message(s, d)
        			
# refresh_display function update the data from the C111 TDC bank memory
# _____________________________________________________________________
    def refresh_display(self):
        global varg
        global constg
	
	varg.array_buf_1 = ""
	varg.array_buf_1_Bank0 = ""
	varg.array_buf_1_Bank1 = ""
	varg.data_2D = ""
	gc.collect()
	varg.AcquisitionDATA = 1
	TDC_getstatus = varg.c111.getTdcStatus(varg.FD)
	varg.START_TDC = TDC_getstatus['AcqState']
	if (varg.START_TDC == 0):
		self.C111GUI_MenuTimer.stop()
		pass

        varg.hwMemReadMeasure.restart() 
 
	if (varg.START_TDC == 1):
            if (DBG == TRUE):
                print "refresh_display: START_TDC==1 "
            config = varg.CurrentCfg.ToTdcSettings()
            nb_BankAcq = config[ constg.IDX_ACQU_BANK ]
            GFD_mode = config[ constg.IDX_PILEUPY ]
            runset = varg.CurrentCfg.ToRunSettings()
            s = "READING C111's MEMORY BANKS ... PLEASE WAIT !!! "
            d = ( runset[constg.IDX_DISPLAY_UPDATE_INTERVAL] - 2) * 1000
            self.statusBar().message(s, d)
            if  (GFD_mode == 1): #Mode is GFD 2D
                if (DBG == TRUE):
                    print "refresh_display:  GFD_MODE==1"
                    print "CFG: ", config
                    print " RDH: ", varg.rdh[0]
		        
                if  (nb_BankAcq == 0):
                    varg.c111.setAcqBank(varg.FD,0)
                    config[ constg.IDX_ACQU_BANK ] = 0
                    varg.array_buf_1_Bank0 = varg.c111.readHistogram_gfd2D(varg.FD,
                                                                config,varg.rdh[0])
                #if( DBG == TRUE):
                    #print "Bank0: " , varg.array_buf_1_Bank0
                    varg.c111.setAcqBank(varg.FD,1)
                    config[ constg.IDX_ACQU_BANK ] = 1
                    varg.array_buf_1_Bank1 = varg.c111.readHistogram_gfd2D(varg.FD,
                                                                config,varg.rdh[0])
                    
                #varg.array_buf_1 = varg.array_buf_1_Bank0 + varg.array_buf_1_Bank1
                
                elif(nb_BankAcq == 1):
                    varg.c111.setAcqBank(varg.FD,1)
                    config[ constg.IDX_ACQU_BANK ] = 1
                    varg.array_buf_1_Bank1 = varg.c111.readHistogram_gfd2D(varg.FD,
                                                                config,varg.rdh[0])
                    varg.c111.setAcqBank(varg.FD,0)
                    config[ constg.IDX_ACQU_BANK ] = 0
                    varg.array_buf_1_Bank0 = varg.c111.readHistogram_gfd2D(varg.FD,
                                                                config,varg.rdh[0])

                varg.array_buf_1 = varg.array_buf_1_Bank0 + varg.array_buf_1_Bank1
                #print "Before TDC_GraphDisplay()"
                self.showMemReadTime()	
                #print "LastHistSum: " ,  varg.c111.getLastHistSum(varg.FD) 	    
                self.TDC_GraphDisplay()

# For saving Image display under a given format:
# ----------------------------------------------
    def Save_Image2D(self):
        global varg
 
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        directory = self.img_dir ;
        fname = QFileDialog.getSaveFileName(
                        directory,
                        "Images (*.png *.ps *.jpg *.bmp)", self, "Save file dialog"
                        "Choose a filename to save under" )
        if fname.isEmpty():
            return
        d = string.split( str(fname), "." )
        if ( len( d ) < 2 ):
            Ind_type = ".png"
        else:
            Ind_type = "."+ d[1]
        varg.new_ImageFilename = d[0]
        
        if   (Ind_type == ".ps"):
            varg.view.Save(varg.new_ImageFilename + ".ps","PS")
        elif (Ind_type == ".png"):
            varg.view.Save(varg.new_ImageFilename + ".png","PNG")
        elif (Ind_type == ".jpg"):
            varg.view.Save(varg.new_ImageFilename + ".jpg","JPG")
        elif (Ind_type == ".bmp"):
            varg.view.Save(varg.new_ImageFilename + ".bmp","BMP")
            
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# END OF THE CLASS C111GUI_Menu

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# BEGINNING OF THE CLASS C111GUI_DisplayLabelDialog
class C111GUI_DisplayLabelDialog(QDialog):
# Constructor
# ~~~~~~~~~~~
    def __init__(self, *args):
	apply(QDialog.__init__,(self,) + args)
	self.SetUpDisplayLabelWindow()
	self.setCaption("Graph Label Setting")
	self.setMinimumSize(QSize(300,170))
	
    def SetUpDisplayLabelWindow(self):
	# Create a grid layout to hold most of the widgets
	self.C111GUI_DisplayLabelLayout = QGridLayout(self,3,1,10,10,"C111GUI_DisplayLabelLayout")
# TEXT LABEL
# ~~~~~~~~~~
	self.TextLabelTitle = QLabel(self,"TextLabelTitle")
        self.TextLabelTitle.setText(self.trUtf8("Title"))
        self.TextLabelXLabel = QLabel(self,"TextLabelXLabel")
        self.TextLabelXLabel.setText(self.trUtf8("X Label"))
        self.TextLabelYLabel = QLabel(self,"TextLabelYLabel")
        self.TextLabelYLabel.setText(self.trUtf8("Y Label"))
	self.C111GUI_DisplayLabelLayout.addWidget(self.TextLabelTitle,0,0)
	self.C111GUI_DisplayLabelLayout.addWidget(self.TextLabelXLabel,1,0)
	self.C111GUI_DisplayLabelLayout.addWidget(self.TextLabelYLabel,2,0)
# LINE EDIT
# ~~~~~~~~~~
	self.LineEditTitle = QLineEdit(self,"LineEditTitle")
	self.LineEditXLabel = QLineEdit(self,"LineEditXLabel")
	self.LineEditYLabel = QLineEdit(self,"LineEditYLabel")
	self.C111GUI_DisplayLabelLayout.addWidget(self.LineEditTitle,0,1)
	self.C111GUI_DisplayLabelLayout.addWidget(self.LineEditXLabel,1,1)
	self.C111GUI_DisplayLabelLayout.addWidget(self.LineEditYLabel,2,1)
# PUSH BUTTON
# ~~~~~~~~~~~
	HBoxLayout_1 = QHBoxLayout(None,0,6,"Layout1")
	self.buttonOK = QPushButton(self,"buttonOK")
	self.buttonOK.setText(self.trUtf8("OK"))
	self.buttonOK.setAutoDefault(1)
	self.buttonOK.setDefault(1)
	HBoxLayout_1.addWidget(self.buttonOK)
	spacer = QSpacerItem(20,0,QSizePolicy.Expanding,QSizePolicy.Minimum)
        HBoxLayout_1.addItem(spacer)
	self.buttonCancel = QPushButton(self,"buttonCancel")
	self.buttonCancel.setText(self.trUtf8("Cancel"))
	self.buttonCancel.setAutoDefault(1)
	HBoxLayout_1.addWidget(self.buttonCancel)
	self.C111GUI_DisplayLabelLayout.addMultiCellLayout(HBoxLayout_1,3,3,0,1)
###############
# CONNECTIONS #
###############
	self.connect(self.buttonOK,SIGNAL("clicked()"),self.OK_fc)
	self.connect(self.buttonCancel,SIGNAL("clicked()"),self.Cancel_fc)
	
    def OK_fc(self):
        global varg
	varg.Graph_title  = str(self.LineEditTitle.text())
	varg.Graph_xlabel = str(self.LineEditXLabel.text())
	varg.Graph_ylabel = str(self.LineEditYLabel.text())
	self.accept()
	    
    def Cancel_fc(self):
	self.reject()
	
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# END OF THE CLASS C111GUI_DisplayLabelDialog

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# BEGINNING OF THE CLASS C111GUI_TDCstatisticDialog

class C111GUI_TDCstatisticDialog(QDialog):
    def __init__(self,parent = None,name = None,modal = 0,fl = 0):
        QDialog.__init__(self,parent,name,modal,fl)

        if not name:
            self.setName("C111GUI_TDCstatisticDialog")

        self.ChannelThreeTextLabel = QLabel(self,"ChannelThreeTextLabel")
        self.ChannelThreeTextLabel.setGeometry(QRect(10,160,160,30))
        self.ChannelThreeTextLabel.setFrameShape(QLabel.LineEditPanel)
        self.ChannelThreeTextLabel.setFrameShadow(QLabel.Plain)
        self.ChannelThreeTextLabel.setAlignment(QLabel.AlignVCenter | QLabel.AlignRight)

        self.ChannelTwoTextLabel = QLabel(self,"ChannelTwoTextLabel")
        self.ChannelTwoTextLabel.setGeometry(QRect(10,130,160,30))
        self.ChannelTwoTextLabel.setFrameShape(QLabel.LineEditPanel)
        self.ChannelTwoTextLabel.setFrameShadow(QLabel.Plain)
        self.ChannelTwoTextLabel.setAlignment(QLabel.AlignVCenter | QLabel.AlignRight)

        self.ChannelOneTextLabel = QLabel(self,"ChannelOneTextLabel")
        self.ChannelOneTextLabel.setGeometry(QRect(10,100,160,30))
        self.ChannelOneTextLabel.setFrameShape(QLabel.LineEditPanel)
        self.ChannelOneTextLabel.setFrameShadow(QLabel.Plain)
        self.ChannelOneTextLabel.setAlignment(QLabel.AlignVCenter | QLabel.AlignRight)

        self.ChannelZeroTextLabel = QLabel(self,"ChannelZeroTextLabel")
        self.ChannelZeroTextLabel.setGeometry(QRect(10,70,160,30))
        self.ChannelZeroTextLabel.setFrameShape(QLabel.LineEditPanel)
        self.ChannelZeroTextLabel.setFrameShadow(QLabel.Plain)
        self.ChannelZeroTextLabel.setAlignment(QLabel.AlignVCenter | QLabel.AlignRight)

        self.ElapsedTimeTextLabel = QLabel(self,"ElapsedTimeTextLabel")
        self.ElapsedTimeTextLabel.setGeometry(QRect(10,30,160,30))
        self.ElapsedTimeTextLabel.setFrameShape(QLabel.LineEditPanel)
        self.ElapsedTimeTextLabel.setFrameShadow(QLabel.Plain)
        self.ElapsedTimeTextLabel.setAlignment(QLabel.AlignVCenter | QLabel.AlignRight)

        self.ElapsedTimeLineEdit = QLineEdit(self,"ElapsedTimeLineEdit")
        self.ElapsedTimeLineEdit.setGeometry(QRect(170,30,40,30))
        self.ElapsedTimeLineEdit.setAlignment(QLineEdit.AlignRight)
        self.ElapsedTimeLineEdit.setReadOnly(1)

        self.ChannelZeroLineEdit = QLineEdit(self,"ChannelZeroLineEdit")
        self.ChannelZeroLineEdit.setGeometry(QRect(170,70,80,30))
        self.ChannelZeroLineEdit.setAlignment(QLineEdit.AlignRight)
        self.ChannelZeroLineEdit.setReadOnly(1)

        self.ChannelOneLineEdit = QLineEdit(self,"ChannelOneLineEdit")
        self.ChannelOneLineEdit.setGeometry(QRect(170,100,80,30))
        self.ChannelOneLineEdit.setAlignment(QLineEdit.AlignRight)
        self.ChannelOneLineEdit.setReadOnly(1)

        self.ChannelTwoLineEdit = QLineEdit(self,"ChannelTwoLineEdit")
        self.ChannelTwoLineEdit.setGeometry(QRect(170,130,80,30))
        self.ChannelTwoLineEdit.setAlignment(QLineEdit.AlignRight)
        self.ChannelTwoLineEdit.setReadOnly(1)

        self.ChannelThreeLineEdit = QLineEdit(self,"ChannelThreeLineEdit")
        self.ChannelThreeLineEdit.setGeometry(QRect(170,160,80,30))
        self.ChannelThreeLineEdit.setAlignment(QLineEdit.AlignRight)
        self.ChannelThreeLineEdit.setReadOnly(1)

        self.CommonStartsTextLabel = QLabel(self,"CommonStartsTextLabel")
        self.CommonStartsTextLabel.setGeometry(QRect(10,200,160,30))
        self.CommonStartsTextLabel.setFrameShape(QLabel.LineEditPanel)
        self.CommonStartsTextLabel.setFrameShadow(QLabel.Plain)
        self.CommonStartsTextLabel.setAlignment(QLabel.AlignVCenter | QLabel.AlignRight)

        self.CommonStartsLineEdit = QLineEdit(self,"CommonStartsLineEdit")
        self.CommonStartsLineEdit.setGeometry(QRect(170,200,80,30))
        self.CommonStartsLineEdit.setAlignment(QLineEdit.AlignRight)
        self.CommonStartsLineEdit.setReadOnly(1)

        self.RejectedEventsTextLabel = QLabel(self,"RejectedEventsTextLabel")
        self.RejectedEventsTextLabel.setGeometry(QRect(10,230,160,30))
        self.RejectedEventsTextLabel.setFrameShape(QLabel.LineEditPanel)
        self.RejectedEventsTextLabel.setFrameShadow(QLabel.Plain)
        self.RejectedEventsTextLabel.setAlignment(QLabel.AlignVCenter | QLabel.AlignRight)

        self.RejectedEventsLineEdit = QLineEdit(self,"RejectedEventsLineEdit")
        self.RejectedEventsLineEdit.setGeometry(QRect(170,230,80,30))
        self.RejectedEventsLineEdit.setAlignment(QLineEdit.AlignRight)
        self.RejectedEventsLineEdit.setReadOnly(1)

        self.StartsRejectedTextLabel = QLabel(self,"StartsRejectedTextLabel")
        self.StartsRejectedTextLabel.setGeometry(QRect(10,260,160,30))
        self.StartsRejectedTextLabel.setFrameShape(QLabel.LineEditPanel)
        self.StartsRejectedTextLabel.setFrameShadow(QLabel.Plain)
        self.StartsRejectedTextLabel.setAlignment(QLabel.AlignVCenter | QLabel.AlignRight)

        self.StartsRejectedLineEdit = QLineEdit(self,"StartsRejectedLineEdit")
        self.StartsRejectedLineEdit.setGeometry(QRect(170,260,80,30))
        self.StartsRejectedLineEdit.setAlignment(QLineEdit.AlignRight)
        self.StartsRejectedLineEdit.setReadOnly(1)

        self.OverflowEventsTextLabel = QLabel(self,"OverflowEventsTextLabel")
        self.OverflowEventsTextLabel.setGeometry(QRect(10,300,159,30))
        self.OverflowEventsTextLabel.setFrameShape(QLabel.LineEditPanel)
        self.OverflowEventsTextLabel.setFrameShadow(QLabel.Plain)
        self.OverflowEventsTextLabel.setAlignment(QLabel.AlignVCenter | QLabel.AlignRight)

        self.OverflowEventsLineEdit = QLineEdit(self,"OverflowEventsLineEdit")
        self.OverflowEventsLineEdit.setGeometry(QRect(170,300,80,30))
        self.OverflowEventsLineEdit.setAlignment(QLineEdit.AlignRight)
        self.OverflowEventsLineEdit.setReadOnly(1)

        self.line1_2 = QFrame(self,"line1_2")
        self.line1_2.setGeometry(QRect(10,10,241,20))
        self.line1_2.setFrameShape(QFrame.HLine)
        self.line1_2.setFrameShadow(QFrame.Sunken)
        self.line1_2.setFrameShape(QFrame.HLine)

        self.line1 = QFrame(self,"line1")
        self.line1.setGeometry(QRect(10,330,241,20))
        self.line1.setFrameShape(QFrame.HLine)
        self.line1.setFrameShadow(QFrame.Sunken)
        self.line1.setFrameShape(QFrame.HLine)

        self.FreezePushButton = QPushButton(self,"FreezePushButton")
        self.FreezePushButton.setGeometry(QRect(90,350,70,30))

        self.ClosePushButton = QPushButton(self,"ClosePushButton")
        self.ClosePushButton.setGeometry(QRect(190,350,60,30))

        self.RunPushButton = QPushButton(self,"RunPushButton")
        self.RunPushButton.setGeometry(QRect(10,350,70,30))
        self.RunPushButton.setDefault(1)
        
        self.statTimer = QTimer(self,"statTimer")
        self.statTimerStarted = 0 
        
        self.connect(self.FreezePushButton,SIGNAL("clicked()"),self.FreezeStats )
        self.connect(self.RunPushButton,SIGNAL("clicked()"),self.RunStats )
        self.connect(self.ClosePushButton,SIGNAL("clicked()"),self.CloseStats)
        self.connect(self.statTimer,SIGNAL("timeout()"),self.AutoUpdate )

        self.languageChange()

        self.resize(QSize(265,392).expandedTo(self.minimumSizeHint()))
        self.clearWState(Qt.WState_Polished)


    def languageChange(self):
        self.setCaption(self.__tr("P/C111 Statistics"))
        self.ChannelThreeTextLabel.setText(self.__tr("   Nb of hits on Channel 3 :  "))
        self.ChannelTwoTextLabel.setText(self.__tr("   Nb of hits on Channel 2 :  "))
        self.ChannelOneTextLabel.setText(self.__tr("   Nb of hits on Channel 1 :  "))
        self.ChannelZeroTextLabel.setText(self.__tr("   Nb of hits on Channel 0 :  "))
        self.ElapsedTimeTextLabel.setText(self.__tr("   Elapsed Time (s) :  "))
        self.CommonStartsTextLabel.setText(self.__tr("   Nb common Starts :  "))
        self.RejectedEventsTextLabel.setText(self.__tr("   Nb of rejected Events :  "))
        self.RejectedEventsLineEdit.setText(QString.null)
        self.StartsRejectedTextLabel.setText(self.__tr("  Rejected / Starts ( % )  :  "))
        self.OverflowEventsTextLabel.setText(self.__tr("   Nb of ALU overflow events  :  "))
        self.OverflowEventsLineEdit.setText(QString.null)
        self.FreezePushButton.setText(self.__tr("Freeze"))
        self.ClosePushButton.setText(self.__tr("Close"))
        self.RunPushButton.setText(self.__tr("Run"))


    def __tr(self,s,c = None):
        return qApp.translate("C111GUI_TDCstatisticDialog",s,c)
        
    def FreezeStats(self):
        #print "FreezeStats: "
        global varg
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        self.statTimerStarted = 0
        self.statTimer.stop()
        varg.c111.stopTdc(varg.FD)
        varg.statsActive = 0
        
    def RunStats(self):
        #print "RunStats: "
        global varg
        #print "\n Update_fc enter\n"
        gettdcstatistic = varg.c111.getTdcStatistics(varg.FD)
        self.ElapsedTimeLineEdit.setText( str(gettdcstatistic['ElapsedTime']))
        self.ChannelZeroLineEdit.setText( str(gettdcstatistic['HitsCh0'] ) )
        self.ChannelOneLineEdit.setText( str(gettdcstatistic['HitsCh1'] ) )
        self.ChannelTwoLineEdit.setText( str(gettdcstatistic['HitsCh2'] ) )
        self.ChannelThreeLineEdit.setText( str(gettdcstatistic['HitsCh3'] ) )
        self.CommonStartsLineEdit.setText( str(gettdcstatistic['ComStarts'] ) )
        self.RejectedEventsLineEdit.setText( str(gettdcstatistic['RejEvents'] ) )
        starts = gettdcstatistic['ComStarts']
            #starts = 10200
        rej = gettdcstatistic['RejEvents']
        #rej = 1020
        qp = 0
        if( starts > 0 ):
            qp = (100 * rej) / starts
                
        self.StartsRejectedLineEdit.setText(str(qp) )
        self.OverflowEventsLineEdit.setText(str(gettdcstatistic['ALUOvfs']))
        if (self.statTimerStarted == 0):
            self.statTimerStarted = 1
            varg.statsActive = 1
            stl = varg.CurrentCfg.GetStatTimerLength()
            delay = int( stl )*1000
            self.statTimer.start( delay )
        
    def CloseStats(self):
        #print "CloseStats: "
        global varg
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
            
        self.statTimerStarted = 0
        self.statTimer.stop( )
        varg.c111.stopTdc(varg.FD)
        varg.statsActive = 0
        self.reject( )
        
    def AutoUpdate(self):
        global varg
        if( varg.FD == -1):
            msg = " No device attached !!\n Need to attach one first !!! \n"
            msg += "USE Attach item in the TOOLS MENU !!!\n" 
            QMessageBox.warning(self,"Warning", msg)
            return
        self.RunStats( )
        varg.c111.stopTdc(varg.FD)
        varg.c111.startTdc(varg.FD , varg.CurrentCfg.GetFiniteTimeLength() * 1000000 )
        #varg.c111.startTdc(varg.FD,varg.value_SoftTimer)


        
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# END OF THE CLASS C111GUI_TDCstatisticDialog


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# BEGINNING OF THE CLASS C111GUI_CubStatusDisplay
class C111GUI_CubStatusDisplay(QDialog):
    def __init__(self,*args):
        apply(QDialog.__init__,(self,)+args)
        self.setupCubStatusWindow()
       	self.resize(255,290)
        self.setCaption("CUB STATUS")
        self.setSizeGripEnabled(1)

    def setupCubStatusWindow(self):
	# Create a grid layout to hold most of the widgets
	self.C111GUI_CUBstatusLayout = QGridLayout(self,2,1,10,10,"C111GUI_TDCstatisticLayout")
# Table CUB STATUS
# ----------------
        self.table_cubstatus = QTable(10,1,self)
	self.table_cubstatus.horizontalHeader().setLabel(0," ")
        self.table_cubstatus.verticalHeader().setLabel(0,"Low voltage for 1.8 V")
        self.table_cubstatus.verticalHeader().setLabel(1,"Low voltage for 2.5 V")
        self.table_cubstatus.verticalHeader().setLabel(2,"Low voltage for 3.3 V")
        self.table_cubstatus.verticalHeader().setLabel(3,"Low voltage for 5 V")
        self.table_cubstatus.verticalHeader().setLabel(4,"Low voltage for 12 V")
        self.table_cubstatus.verticalHeader().setLabel(5,"Low voltage for -12 V")
        self.table_cubstatus.verticalHeader().setLabel(6,"                              ")
        self.table_cubstatus.verticalHeader().setLabel(7,"PLL for 33Mhz")
        self.table_cubstatus.verticalHeader().setLabel(8,"PLL for TDC clock")
        self.table_cubstatus.verticalHeader().setLabel(9,"Cub serial number")
	getcubstatus = varg.c111.getCubStatus(varg.FD)
	list_string = ["1.8V","2.5V","3.3V","5V","+12V","-12V","lv_ok", "pll_33MHz_ok","pll_tdcclk_ok","cub_sn"]
	list_value = []
	for i in range(len(list_string)):
		for key in getcubstatus.keys():
			if (list_string[i] == key):
				list_value.append(getcubstatus[key])
			else:
				pass
	
	for i in range(len(list_value)-1):
		if (list_value[i] == 1):
			self.table_cubstatus.setText(i,0,"OK")
		else:
			self.table_cubstatus.setText(i,0,"NOT OK")
		if( i == 6):
		    self.table_cubstatus.setText(i,0,"      ")
		    
	self.table_cubstatus.setText(9,0,str(list_value[len(list_value)-1]))
        self.table_cubstatus.setFrameShape(QTable.WinPanel)
        self.table_cubstatus.setMouseTracking(0)
        self.table_cubstatus.setLineWidth(0)
        self.table_cubstatus.setMargin(0)
        self.table_cubstatus.setMidLineWidth(0)
        self.table_cubstatus.setResizePolicy(QTable.Manual)
	self.table_cubstatus.setLeftMargin(130)
        self.table_cubstatus.setVScrollBarMode(QTable.Auto)
        self.table_cubstatus.setHScrollBarMode(QTable.Auto)
	self.table_cubstatus.setColumnMovingEnabled(0)
	self.table_cubstatus.setRowMovingEnabled(0)
	self.table_cubstatus.setDragAutoScroll(0)
        self.table_cubstatus.setEnabled(0)
        self.C111GUI_CUBstatusLayout.addMultiCellWidget(self.table_cubstatus,0,0,0,1)
# PUSH BUTTON
# ~~~~~~~~~~~
	self.buttonClose = QPushButton(self,"buttonClose")
	#self.buttonClose.setText(self.trUtf8("Close"))
	self.buttonClose.setText("Close")
	self.buttonClose.setAutoDefault(1)
	self.C111GUI_CUBstatusLayout.addMultiCellWidget(self.buttonClose,1,1,0,1)
###############
# CONNECTIONS #
###############
	self.connect(self.buttonClose,SIGNAL("clicked()"),self.Close_fc)
        
    def Close_fc(self):
        self.accept()
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# END OF THE CLASS C111GUI_CubStatusDisplay

########################################################
#							#
# Definition of the function which one execute the code #
#							#
#########################################################
def main(args):
  #global list_devices
  #global dict_dialgs
  
  global varg 
  global constg
  #gc.set_debug(gc.DEBUG_LEAK)
  varg = C111GUI_globals()
  varg.hwMemReadMeasure.start() 
  varg.hwMemDisplMeasure.start()
  constg = C111Globals()
  
  varg.user = getpass.getuser()
  if(DBG==TRUE):
    print "Current User: " ,  varg.user
  if (sys.platform == "win32"):
    if( os.path.exists( constg.CFG_PATH_USER) == False ):
        os.mkdir( constg.CFG_PATH_USER)
    path_server_cfg = constg.CFG_PATH_MAIN  +  constg.CFG_PATH_SERVER ;
    if( os.path.exists( path_server_cfg) == False ):
        os.mkdir( path_server_cfg)
   
  varg.cfg_path = constg.CFG_PATH_MAIN                 
  varg.c111 = c111.c111()
  varg.list_devices = varg.c111.searchDev()
  exception_dev = 'Device search error'
  a = QApplication( sys.argv )
  
  if( DBG==TRUE):
	print "\n Main: QApplication() done \n"
  try :
	if (varg.list_devices[0] == -1):
		raise exception_dev	
	else:
		pass	
		
  except exception_dev:
	print "exception_dev select"
	QMessageBox.critical(None,"Critical",varg.list_devices[1])
	qApp.quit()
  
  else:
        user_path =  constg.CFG_PATH_USER + varg.user + "\\"
        if( os.path.exists(user_path) == False ):
            msg = "Default directory for configurations is: " +  constg.CFG_PATH_MAIN + " \n\n"
            msg = msg + "Do you want your own configuration space in : \n\n"
            msg = msg + user_path + "\n\n"
            ret = QMessageBox.warning( None , "C111 GUI", msg ,"Yes", "No",  None, 0, 1 )
            if ret==0:
                #print "Default: ", constg.CFG_PATH_MAIN , "\nUser : ", varg.user , " wants : " , user_path
                shutil.copytree( constg.CFG_PATH_MAIN , user_path )
        if( os.path.exists(user_path) == True):        
            varg.cfg_path = user_path
                    
                    
            
	y = C111GUI_Menu()
        dict_dialgs = {     "Menu":y, 
                                "TdcStatistics":"none" } ;   
	global Signal_class
	Signal_class = C111GUI_SignalHandler()	
	a.setMainWidget( y )
	y.show()
	a.exec_loop()

if __name__=="__main__":
	main(sys.argv)
	


# Nota Bene 
# __________

# (Python signal):
# ================

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# BEGINNING OF THE CLASS C111GUI_MySignal
#class C111GUI_MySignal(QObject):
#    def Accepted(self):
#	self.emit(PYSIGNAL("sigAccepted"),())

# Definition of the signal emitted by the mode:
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#    def GFD_selected(self,main_class):
#	self.emit(PYSIGNAL("sigGFD_selected"),(main_class,))

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# END OF THE CLASS C111GUI_MySignal